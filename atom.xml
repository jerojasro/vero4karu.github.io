<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cansada de ser feliz]]></title>
  <link href="http://blog.vero4ka.info/atom.xml" rel="self"/>
  <link href="http://blog.vero4ka.info/"/>
  <updated>2016-05-11T08:53:24-05:00</updated>
  <id>http://blog.vero4ka.info/</id>
  <author>
    <name><![CDATA[Vera Mazhuga]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL to SQLAlquemy Conversions]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/05/04/sql-to-sqlalquemy-conversions/"/>
    <updated>2016-05-04T21:15:39-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/05/04/sql-to-sqlalquemy-conversions</id>
    <content type="html"><![CDATA[<p>Some examples on how to convert raw SQL to SQLAlchemy query:</p>

<h3>Select all</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">text</span><span class="p">,</span> <span class="n">func</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">())</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Add labels</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">requiests</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">.</span><span class="n">label</span><span class="p">(</span><span class="s">&#39;requests&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">row</span><span class="o">.</span><span class="n">requests</span>
</span><span class='line'><span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Sum</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="k">as</span> <span class="n">rides</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">label</span><span class="p">(</span><span class="s">&#39;books&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">row</span><span class="o">.</span><span class="n">books</span>
</span><span class='line'><span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Return a count of rows and distinct</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span><span class="p">(</span><span class="n">author_id</span><span class="p">))</span> <span class="k">as</span> <span class="n">authors</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">distinct</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">distinct</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">author_id</span><span class="p">))</span><span class="o">.</span><span class="n">label</span><span class="p">(</span><span class="s">&#39;authors&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Query a date range</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">b</span> <span class="k">WHERE</span> <span class="n">b</span><span class="p">.</span><span class="n">created_at</span> <span class="o">&gt;</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="p">(</span><span class="k">current_timestamp</span> <span class="o">-</span> <span class="nb">interval</span> <span class="s1">&#39;5 hours&#39;</span><span class="p">)::</span><span class="n">time</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Book</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">between</span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">5</span><span class="p">),</span> <span class="n">now</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conditional sum</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(((</span><span class="n">status</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">))::</span><span class="nb">int</span><span class="p">))</span> <span class="k">as</span> <span class="n">books</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="kn">from</span> <span class="nn">sqlalchemy.sql.expression</span> <span class="kn">import</span> <span class="n">case</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">case</span><span class="p">([(</span><span class="n">Book</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">in_</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">)),</span> <span class="mi">1</span><span class="p">)],</span> <span class="n">else_</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span><span class="o">.</span><span class="n">label</span><span class="p">(</span><span class="s">&#39;books&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>In</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">Book</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Book</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">in_</span><span class="p">((</span>
</span><span class='line'>        <span class="n">BOOK_CONFIRMED</span><span class="p">,</span>
</span><span class='line'>        <span class="n">BOOK_FINISHED</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)),</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Other examples</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bookings</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">to_char</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span> <span class="s">&#39;MM&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Book</span><span class="o">.</span><span class="n">author_id</span> <span class="o">==</span> <span class="n">author</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">between</span><span class="p">(</span><span class="n">six_months_ago_min</span><span class="p">,</span> <span class="n">today_max</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">group_by</span><span class="p">(</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">to_char</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span> <span class="s">&#39;MM&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">to_char</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span> <span class="s">&#39;MM&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pruebas Para Formularios en Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/09/30/pruebas-para-formularios-en-django/"/>
    <updated>2015-09-30T04:49:19-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/09/30/pruebas-para-formularios-en-django</id>
    <content type="html"><![CDATA[<p>En esta entrada de blog quiero compartir la forma en la que escribo ruebas para formularios en un proyecto de Django.</p>

<p>Primero vamos a instalar los paquetes necesarios:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install django-webtest
</span><span class='line'>$ pip install factory-boy</span></code></pre></td></tr></table></div></figure>


<p><a href="http://webtest.pythonpaste.org/en/latest/WebTest">WebTest</a> es una biblioteca que nos ayuda a escribir pruebas para las aplicaciones wsgi. Es mucho más poderosa comparando con <code>django.test.Client</code> que viene con Django.</p>

<p>En el archivo de configuración especificamos que vamos a usar la base de datos SQLite para correr nuestras pruebas:</p>

<figure class='code'><figcaption><span>test_settings.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s">&#39;django.db.backends.sqlite3&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suponemos que queremos escribir una prueba unitaria para una vista que crea un objeto del modelo <code>Event</code>:</p>

<figure class='code'><figcaption><span>models.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Event</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="n">start_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">end_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">people</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="s">&#39;history.Person&#39;</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;events&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aquí está la vista que maneja el formulario para crear un evento:</p>

<figure class='code'><figcaption><span>views.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">EventCreateView</span><span class="p">(</span><span class="n">LoginRequiredMixin</span><span class="p">,</span> <span class="n">CreateView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">Event</span>
</span><span class='line'>    <span class="n">form_class</span> <span class="o">=</span> <span class="n">EventForm</span>
</span><span class='line'>    <span class="n">success_url</span> <span class="o">=</span> <span class="n">reverse_lazy</span><span class="p">(</span><span class="s">&#39;history:timeline&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora escribimos nuestra prueba. Vamos a extender la clase <code>django_webtest.WebTest</code>, que en su lugar extiende <code>django.test.TestCase</code> de Django, y crear a un usuario:</p>

<figure class='code'><figcaption><span>tests.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django_webtest</span> <span class="kn">import</span> <span class="n">WebTest</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HistoryViewsTests</span><span class="p">(</span><span class="n">WebTest</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">superuser</span> <span class="o">=</span> <span class="n">get_user_model</span><span class="p">()</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create_superuser</span><span class="p">(</span>
</span><span class='line'>            <span class="n">email</span><span class="o">=</span><span class="s">&#39;superuser@example.com&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">username</span><span class="o">=</span><span class="s">&#39;superuser&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">password</span><span class="o">=</span><span class="s">&#39;secret&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">HistoryViewsTests</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">setUp</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_create_event</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># código para nuestra prueba</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora podemos probar que cuando un usuario trata de acceder nuestra página, se redirige al formulario de acceso (el códigos de estado HTTP es 302):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="n">reverse</span><span class="p">(</span><span class="s">&#39;history:event_create&#39;</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">302</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora vamos a acceder la vista como superusuario:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">user</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">superuser</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como tenemos solo un formulario en la página, podemos obtenerlo por una de tres formas: por el atributo <code>.form</code>: <code>response.form</code>, por índice <code>response.forms[0]</code> o por <code>id</code> del formulario (artibuto HTML)<code>response.forms['event_form']</code>.</p>

<p>Para facilitar la depuración de nuestras pruebas, podemos pedir a mostrar el <code>response</code> en navegador predeterminado:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">response</span><span class="o">.</span><span class="n">showbrowser</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora podemos diligenciar nuestro formulario con los datos de prueba:</p>

<figure class='code'><figcaption><span>tests.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">HistoryViewsTests</span><span class="p">(</span><span class="n">WebTest</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_create_event</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">person1</span><span class="p">,</span> <span class="n">person2</span><span class="p">,</span> <span class="n">person3</span> <span class="o">=</span> <span class="n">PersonFactory</span><span class="o">.</span><span class="n">create_batch</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">user</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">superuser</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">Event</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">exists</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">forms</span><span class="p">[</span><span class="s">&#39;event_form&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">form</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">u&#39;Título del evento&#39;</span>
</span><span class='line'>        <span class="n">form</span><span class="p">[</span><span class="s">&#39;start_date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>        <span class="n">form</span><span class="p">[</span><span class="s">&#39;people&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">person1</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">person2</span><span class="o">.</span><span class="n">id</span><span class="p">]</span>
</span><span class='line'>        <span class="n">form</span><span class="o">.</span><span class="n">submit</span><span class="p">()</span><span class="o">.</span><span class="n">follow</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">Event</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">count</span><span class="p">(),</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">event</span> <span class="o">=</span> <span class="n">Event</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="s">u&#39;Título del evento&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">people</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">people</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">person1</span><span class="p">,</span> <span class="n">people</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">person2</span><span class="p">,</span> <span class="n">people</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertNotIn</span><span class="p">(</span><span class="n">person3</span><span class="p">,</span> <span class="n">people</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para generar objetos del modelo <code>Person</code> usamos la biblioteca <a href="http://factoryboy.readthedocs.org/">Factory Boy</a>:</p>

<figure class='code'><figcaption><span>factories.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">..models</span> <span class="kn">import</span> <span class="n">Person</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">factory</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">factory.fuzzy</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PersonFactory</span><span class="p">(</span><span class="n">factory</span><span class="o">.</span><span class="n">django</span><span class="o">.</span><span class="n">DjangoModelFactory</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">fuzzy</span><span class="o">.</span><span class="n">FuzzyText</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">model</span> <span class="o">=</span> <span class="n">Person</span>
</span></code></pre></td></tr></table></div></figure>


<p>Así podemos acceder los opciones de una selección o selección múltiple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span> <span class="n">form</span><span class="p">[</span><span class="s">&#39;people&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">options</span>
</span><span class='line'><span class="go">[(u&#39;1&#39;, False, u&#39;GLUZLvZfyjdZEmjNtnAJvsIVljodQjZpzLRDKrqJtYGiDLmSrN&#39;), (u&#39;2&#39;, False, u&#39;vOxDBbmLaUXxJkJzcqYgLQpBieSoLtXJcpHCEPUpYUIzybhsAh&#39;), (u&#39;3&#39;, False, u&#39;tfXSXCTIQICDwVPYvxZGSXgclFTnHbeYSQaMntxJNcgUJjzAwX&#39;)]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">form</span><span class="p">[</span><span class="s">&#39;people&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">person1</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">person2</span><span class="o">.</span><span class="n">id</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span> <span class="n">form</span><span class="p">[</span><span class="s">&#39;people&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'><span class="go">[u&#39;1&#39;, u&#39;2&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora corremos nuestras pruebas y voilà:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./manage.py test
</span><span class='line'>Creating test database for alias 'default'...
</span><span class='line'>..
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'>Ran 1 test in 0.463s
</span><span class='line'>
</span><span class='line'>OK
</span><span class='line'>Destroying test database for alias 'default'...</span></code></pre></td></tr></table></div></figure>


<p>Enlaces:</p>

<ul>
<li><a href="https://github.com/django-webtest/django-webtest">WebTest</a></li>
<li><a href="http://webtest.pythonpaste.org/en/latest/forms.html">Manejo de formularios con WebTest</a></li>
<li><a href="http://factoryboy.readthedocs.org/">Factory Boy</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cómo Configurar PyCharm Para Compilar Los Archivos SASS]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/06/29/como-configurar-pycharm-para-compilar-los-archivos-sass/"/>
    <updated>2015-06-29T03:10:03-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/06/29/como-configurar-pycharm-para-compilar-los-archivos-sass</id>
    <content type="html"><![CDATA[<p>Suponemos que tenemos un proyecto con las siguientes carpetas:</p>

<pre><code>app/
   static/
        css/
        sass/
            main.sass
            home.sass
            variables.sass
</code></pre>

<p>y queremos que cada vez cuando editemos alguno de los archivos <code>.sass</code>, PyCharm lo compile y ponga en la carpeta <code>app/static/css/</code>:</p>

<pre><code>app/
   static/
        css/
            main.css
            home.css
        sass/
            main.sass
            home.sass
            variables.sass
</code></pre>

<p>Para esto debemos ir a <code>File -&gt; Settings -&gt; File Watchers</code> y agregar un nuevo watcher, escogiendo la opción <code>SASS</code></p>

<p><img src="http://blog.vero4ka.info/images/pycharm_file_watchers.png"></p>

<p>y editar las configuraciones:</p>

<p><img src="http://blog.vero4ka.info/images/pycharm_file_watchers_settings.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Raise a Form Invalid Event Inside Form_valid Method of a FormView]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/how-to-raise-a-form-invalid-event-inside-form-valid-method-of-a-formview/"/>
    <updated>2015-03-01T19:35:52-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/how-to-raise-a-form-invalid-event-inside-form-valid-method-of-a-formview</id>
    <content type="html"><![CDATA[<p>How to raise form invalid inside <code>form_valid</code> method of a <code>FormView</code> (<code>CreateView</code>/<code>UpdateView</code>) and add an error message to <code>non_field_errors</code>:</p>

<div><script src='https://gist.github.com/3b62a13bdce7fe4178ac.js'></script>
<noscript><pre><code>from django.forms.util import ErrorList
from django import forms

class ContractUpdateView(UpdateView):
    model = Contract
    template_name = &#39;contract/contract_form.html&#39;
    form_class = ContractForm

    def form_valid(self, form):
        if self.request.POST.get(&#39;finish&#39;):
            if (
                not form.cleaned_data[&#39;number&#39;] or
                not self.object.images.count()
            ):
                form._errors[forms.forms.NON_FIELD_ERRORS] = ErrorList([
                    u&#39;You have to add images and a contract number&#39;
                ])
                return self.form_invalid(form)
            self.object.is_submitted = True
        self.object = form.save()
        return HttpResponseRedirect(self.get_success_url())</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Show a BooleanField of a ModelForm as Radio Select (Yes/no) in Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/how-to-show-a-booleanfield-of-a-modelform-as-radio-select-yes-slash-no-in-django/"/>
    <updated>2015-03-01T19:26:52-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/how-to-show-a-booleanfield-of-a-modelform-as-radio-select-yes-slash-no-in-django</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s suppose that we have a field <code>is_active</code> in our model. It is a boolean field, but in a template we want to show it as a radio select.</p>

<p>In this case we just need to add <code>choices</code> attribute for the model field and then change a widget of the corresponding form:</p>

<div><script src='https://gist.github.com/ff27cad71d8f7f80f735.js'></script>
<noscript><pre><code>class MyForm(forms.ModelForm):
    class Meta:
        model = MyModel
        widgets = {
            &#39;is_active&#39;: forms.RadioSelect
        }</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Send Request to AJAX View in Django Tests]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/how-to-send-request-to-ajax-view-in-django-tests/"/>
    <updated>2015-03-01T19:23:37-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/how-to-send-request-to-ajax-view-in-django-tests</id>
    <content type="html"><![CDATA[<p>If you have a view that requires an AJAX request, in other words, checks if <code>request.is_ajax()</code>, here is a way you can write a unit test for this view:</p>

<div><script src='https://gist.github.com/dca59e325c9f7554d176.js'></script>
<noscript><pre><code>import json
from django.test import TestCase

class JSONViewTestCase(TestCase):

    def test_json_view(self):
        response = self.client.post(
            reverse(&#39;my_json_view&#39;),
            json.dumps({
                # your JSON
            }),
            &#39;json&#39;,
            HTTP_X_REQUESTED_WITH=&#39;XMLHttpRequest&#39;,
        )
        json_string = response.content
        response_data = json.loads(json_string)
        # do smth.</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[¿Cómo Concatenar Querysets Del Mismo Modelo en Django?]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/como-concatenar-querysets-del-mismo-modelo-en-django/"/>
    <updated>2015-03-01T19:21:21-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/como-concatenar-querysets-del-mismo-modelo-en-django</id>
    <content type="html"><![CDATA[<p>Modo #1:</p>

<p>Podemos usar <code>itertools.chain</code> para  unir dos o más querysets:</p>

<pre><code>from itertools import chain
for item in chain(qs1, qs2, qs3):
    # ...
</code></pre>

<p>Modo #2:</p>

<p>Podemos usar el operador lógico <code>OR</code>:</p>

<pre><code>res = qs1 | qs2 | qs3
res = res.distinct()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get an Array of Checked Checkboxes Values Using jQuery]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/get-an-array-of-checked-checkboxes-values-using-jquery/"/>
    <updated>2015-03-01T19:17:42-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/get-an-array-of-checked-checkboxes-values-using-jquery</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/9772283.js'></script>
<noscript><pre><code>&lt;input type=&quot;checkbox&quot; value=&quot;UN&quot; name=&quot;airlines&quot; checked&gt;       
&lt;input type=&quot;checkbox&quot; value=&quot;IB&quot; name=&quot;airlines&quot;&gt;      
&lt;input type=&quot;checkbox&quot; value=&quot;SU&quot; name=&quot;airlines&quot; checked&gt;</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algunos Paquetes útiles Para Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/algunos-paquetes-utiles-para-django/"/>
    <updated>2015-03-01T19:16:24-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/algunos-paquetes-utiles-para-django</id>
    <content type="html"><![CDATA[<h4><a href="https://github.com/omab/python-social-auth">python-social-auth</a></h4>

<p>Autentificación de usuarios con los redes sociales en Django.</p>

<h4><a href="https://github.com/praekelt/django-recaptcha">django-recaptcha</a></h4>

<p>Integración de reCAPTCHA en los formularios de Django.</p>

<h4><a href="https://github.com/alex/django-taggit">django-taggit</a></h4>

<p>Campo para los modelos de Django para crear etiquetas.</p>

<h4><a href="https://github.com/sehmaschine/django-grappelli">django-grappelli</a></h4>

<p>Interface para el Administrador de Django.</p>

<h4><a href="https://github.com/jezdez/django-constance">django-constance</a></h4>

<p>Para cambiar algunas variables de configuración desde el Administrador de Django.</p>

<h4><a href="https://github.com/praekelt/django-recaptcha">django-recaptcha</a></h4>

<p>Usar <a href="https://www.google.com/recaptcha/">reCAPTCHA</a> de Google en los formularios de Django.</p>

<h4><a href="https://github.com/trentm/django-markdown-deux">django-markdown-deux</a></h4>

<p>Templatetags y filtros que permiten usar Markdown en las plantillas de Django.</p>

<h4><a href="https://github.com/django-debug-toolbar/django-debug-toolbar">django-debug-toolbar</a></h4>

<p>La herramienta que ayuda con la depuración del código en Django.
Instrucciones para instalar el módulo: <a href="http://www.ruben-arranz.es/blog/instalar-django-debug-toolbar/">http://www.ruben-arranz.es/blog/instalar-django-debug-toolbar/</a></p>

<h4><a href="https://github.com/paulocheque/django-dynamic-fixture">django-dynamic-fixture</a></h4>

<p>Ayuda crear objetos de modelos de Django de la forma dinámica. Es muy útil para los test cuando hay necesidad de crear muchos objetos.</p>

<h4><a href="https://github.com/brack3t/django-braces">django-braces</a></h4>

<p>La biblioteca de los mixins útiles para Django.</p>

<h4><a href="https://github.com/revsys/django-friendship">django-friendship</a></h4>

<p>Biblioteca que ayuda a manejar las peticiones de amistad para los usuarios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Templates: Render an Array in Two Columns Using Bootstrap Grid]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/django-templates-render-an-array-in-two-columns-using-bootstrap-grid/"/>
    <updated>2015-03-01T19:03:05-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/django-templates-render-an-array-in-two-columns-using-bootstrap-grid</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/efd0fdb46ef34971bac2.js'></script>
<noscript><pre><code>&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        1
    &lt;/div&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        2
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        3
    &lt;/div&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        4
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        5
    &lt;/div&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        6
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        7
    &lt;/div&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        8
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        9
    &lt;/div&gt;
&lt;/div&gt;</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Validate a Django Form With Inline Formsets]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/how-to-validate-a-django-form-with-inline-formsets/"/>
    <updated>2015-03-01T18:57:47-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/how-to-validate-a-django-form-with-inline-formsets</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/1c065cb54baef2da79c2.js'></script>
<noscript><pre><code>from django.contrib import admin

from product.forms import EquipmentForm

@admin.register(Equipment)
class EquipmentAdmin(admin.ModelAdmin):
    form = EquipmentForm
    
    inlines = [
        EquipmentGalleryInline,
    ]</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate .zip File in Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/generate-zip-file-in-django/"/>
    <updated>2015-03-01T18:47:58-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/generate-zip-file-in-django</id>
    <content type="html"><![CDATA[<p>A view that creates a .ZIP file of multiple files and returns it in response:</p>

<div><script src='https://gist.github.com/3b1768a1cb13f7e457d4.js'></script>
<noscript><pre><code>import os
import zipfile
import cStringIO as StringIO

class ContractDownloadGalleryDetailView(LoginRequiredMixin, DetailView):
    model = Contract

    def render_to_response(self, context, **httpresponse_kwargs):
        contract = self.object

        if not contract.images.exists():
            return HttpResponseRedirect(
                reverse(&#39;contract:contract_detail&#39;, args=(contract.id,)),
            )

        dirname = u&#39;imagenes_contrato_{0}&#39;.format(contract.number)
        filename = u&#39;{0}.zip&#39;.format(dirname)

        buffer = StringIO.StringIO()
        z = zipfile.ZipFile(buffer, &#39;w&#39;)
        for contract_image in contract.images.all():
            z.write(contract_image.image.path, os.path.join(dirname, os.path.basename(contract_image.image.path)))
        z.close()
        buffer.seek(0)
        response = HttpResponse(buffer.read())
        response[&#39;Content-Disposition&#39;] = u&#39;attachment; filename={0}&#39;.format(filename)
        response[&#39;Content-Type&#39;] = &#39;application/x-zip&#39;
        return response</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django: Python-social-auth Configuration and Pipeline to Get Users Information]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/django-python-social-auth-configuration-and-pipeline-to-get-users-information/"/>
    <updated>2015-03-01T18:45:21-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/django-python-social-auth-configuration-and-pipeline-to-get-users-information</id>
    <content type="html"><![CDATA[<p><code>python-social-auth</code> configuration and pipeline to get users email, full name and save avatar for Facebook, Twitter, LinkedIn and Google in Django.</p>

<div><script src='https://gist.github.com/9899590.js'></script>
<noscript><pre><code>def update_user_social_data(strategy, *args, **kwargs):
    &quot;&quot;&quot;Set the name and avatar for a user only if is new.
    &quot;&quot;&quot;
    print &#39;update_user_social_data ::&#39;, strategy
    if not kwargs[&#39;is_new&#39;]:
        return

    full_name = &#39;&#39;
    backend = kwargs[&#39;backend&#39;]

    user = kwargs[&#39;user&#39;]

    if (
        isinstance(backend, GoogleOAuth2)
        or isinstance(backend, FacebookOAuth2)
    ):
        full_name = kwargs[&#39;response&#39;].get(&#39;name&#39;)
    elif (
        isinstance(backend, LinkedinOAuth)
        or isinstance(backend, TwitterOAuth)
    ):
        if kwargs.get(&#39;details&#39;):
            full_name = kwargs[&#39;details&#39;].get(&#39;fullname&#39;)

    user.full_name = full_name

    if isinstance(backend, GoogleOAuth2):
        if response.get(&#39;image&#39;) and response[&#39;image&#39;].get(&#39;url&#39;):
            url = response[&#39;image&#39;].get(&#39;url&#39;)
            ext = url.split(&#39;.&#39;)[-1]
            user.avatar.save(
               &#39;{0}.{1}&#39;.format(&#39;avatar&#39;, ext),
               ContentFile(urllib2.urlopen(url).read()),
               save=False
            )
    elif isinstance(backend, FacebookOAuth2):
        fbuid = kwargs[&#39;response&#39;][&#39;id&#39;]
        image_name = &#39;fb_avatar_%s.jpg&#39; % fbuid
        image_url = &#39;http://graph.facebook.com/%s/picture?type=large&#39; % fbuid
        image_stream = urlopen(image_url)

        user.avatar.save(
            image_name,
            ContentFile(image_stream.read()),
        )
    elif isinstance(backend, TwitterOAuth):
        if kwargs[&#39;response&#39;].get(&#39;profile_image_url&#39;):
            image_name = &#39;tw_avatar_%s.jpg&#39; % full_name
            image_url = kwargs[&#39;response&#39;].get[&#39;profile_image_url&#39;]
            image_stream = urlopen(image_url)

            user.avatar.save(
                image_name,
                ContentFile(image_stream.read()),
            )
    elif isinstance(backend, LinkedinOAuth):
        if kwargs[&#39;response&#39;].get(&#39;pictureUrl&#39;):
            image_name = &#39;linked_avatar_%s.jpg&#39; % full_name
            image_url = kwargs[&#39;response&#39;].get[&#39;pictureUrl&#39;]
            image_stream = urlopen(image_url)

            user.avatar.save(
                image_name,
                ContentFile(image_stream.read()),
            )
    user.save()</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Chorme Extentions]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/useful-chorme-extentions/"/>
    <updated>2015-03-01T18:41:53-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/useful-chorme-extentions</id>
    <content type="html"><![CDATA[<h4>JSONView</h4>

<p>Validate and view JSON documents.
<a href="https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc">https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc</a></p>

<h4>Postman - REST Client</h4>

<p><a href="https://chrome.google.com/webstore/detail/fdmmgilgnpjigdojojpjoooidkmcomcm">https://chrome.google.com/webstore/detail/fdmmgilgnpjigdojojpjoooidkmcomcm</a></p>

<h4>Evernote Web Clipper</h4>

<p>Use the Evernote extension to save things you see on the web into your Evernote account.
<a href="https://chrome.google.com/webstore/detail/pioclpoplcdbaefihamjohnefbikjilc">https://chrome.google.com/webstore/detail/pioclpoplcdbaefihamjohnefbikjilc</a></p>

<h4>GistBox Clipper</h4>

<p>Save code snippets from anywhere on the web. Companion extension to GistBoxApp.com.
<a href="https://chrome.google.com/webstore/detail/cejmhmbmafamjegaebkjhnckhepgmido">https://chrome.google.com/webstore/detail/cejmhmbmafamjegaebkjhnckhepgmido</a></p>

<h4>XV — XML Viewer</h4>

<p>Powerful XML viewer for Google Chrome
<a href="https://chrome.google.com/webstore/detail/eeocglpgjdpaefaedpblffpeebgmgddk">https://chrome.google.com/webstore/detail/eeocglpgjdpaefaedpblffpeebgmgddk</a></p>

<h4>LiveReload</h4>

<p><a href="https://chrome.google.com/webstore/detail/jnihajbhpnppcggbcgedagnkighmdlei">https://chrome.google.com/webstore/detail/jnihajbhpnppcggbcgedagnkighmdlei</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MEL Script (Autodesk Maya): Go Through Hierarchy]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/02/21/mel-script-autodesk-maya-go-through-hierarchy/"/>
    <updated>2015-02-21T21:43:47-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/02/21/mel-script-autodesk-maya-go-through-hierarchy</id>
    <content type="html"><![CDATA[<p>Add a prefix <code>myPrefix_</code> to all child elements of the joint <code>joint1</code>:</p>

<div><script src='https://gist.github.com/11099336.js'></script>
<noscript><pre><code>string $stat_element = &quot;joint1&quot;;
select -r $stat_element;
string $nodes[] = `ls -sl -dag`;
for($node in $nodes){
    rename -ignoreShape $node (&quot;myPrefix_&quot; + $node);
}</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Add a Custom Button to Admin Change List View Id Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/02/21/how-to-add-a-custom-button-to-admin-change-list-view-id-django/"/>
    <updated>2015-02-21T17:35:44-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/02/21/how-to-add-a-custom-button-to-admin-change-list-view-id-django</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/12fb4de2726c6ef563f3.js'></script>
<noscript><pre><code>class BasicAdmin(admin.ModelAdmin):
    # ...

    def get_urls(self):
        urls = super(BasicAdmin, self).get_urls()
        my_urls = patterns(
            &#39;&#39;,
            (r&#39;^download_as_xls/$&#39;, self.download_as_xls_view)
        )
        return my_urls + urls

    def download_as_xls_view(self, request):
        &quot;&quot;&quot;Generates an xls file
        &quot;&quot;&quot;

        response = HttpResponse(mimetype=&#39;application/ms-excel&#39;)
        response[&#39;Content-Disposition&#39;] = \
            &#39;attachment; filename=Report.xls&#39;
        # do something
        return response</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Raise a Form Invalid Event Inside Form_valid Method of a FormView]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/02/21/how-to-raise-a-form-invalid-event-inside-form-valid-method-of-a-formview/"/>
    <updated>2015-02-21T17:34:58-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/02/21/how-to-raise-a-form-invalid-event-inside-form-valid-method-of-a-formview</id>
    <content type="html"><![CDATA[<p>How to raise form invalid inside <code>form_valid</code> method of a <code>FormView</code> (<code>CreateView</code>/<code>UpdateView</code>) and add an error message to <code>non_field_errors</code></p>

<div><script src='https://gist.github.com/3b62a13bdce7fe4178ac.js'></script>
<noscript><pre><code>from django.forms.util import ErrorList
from django import forms

class ContractUpdateView(UpdateView):
    model = Contract
    template_name = &#39;contract/contract_form.html&#39;
    form_class = ContractForm

    def form_valid(self, form):
        if self.request.POST.get(&#39;finish&#39;):
            if (
                not form.cleaned_data[&#39;number&#39;] or
                not self.object.images.count()
            ):
                form._errors[forms.forms.NON_FIELD_ERRORS] = ErrorList([
                    u&#39;You have to add images and a contract number&#39;
                ])
                return self.form_invalid(form)
            self.object.is_submitted = True
        self.object = form.save()
        return HttpResponseRedirect(self.get_success_url())</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Pass a Variable From Form to View in Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/02/21/how-to-pass-a-variable-from-form-to-view-in-django/"/>
    <updated>2015-02-21T11:09:20-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/02/21/how-to-pass-a-variable-from-form-to-view-in-django</id>
    <content type="html"><![CDATA[<p>Sometimes there is a need to pass a variable (parameter) from a <code>FormView</code> (for example, <code>CreateView</code>,  <code>UpdateView</code>) to a form (for example, <code>ModelForm</code>).</p>

<p>Let&rsquo;s suppose that we want to use a value of <code>other_variable</code> from a view <code>MyCreateView</code> in <code>MyForm</code>:</p>

<div><script src='https://gist.github.com/ec0f82bb3d302961503d.js'></script>
<noscript><pre><code>class MyForm(forms.ModelForm):
    requested_asset = None
    
    def __init__(self, *args, **kwargs):
        other_variable = kwargs.pop(&#39;other_variable&#39;)
        super(MyForm, self).__init__(*args, **kwargs)</code></pre></noscript></div>

]]></content>
  </entry>
  
</feed>
