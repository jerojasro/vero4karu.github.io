<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cansada de ser feliz]]></title>
  <link href="http://blog.vero4ka.info/atom.xml" rel="self"/>
  <link href="http://blog.vero4ka.info/"/>
  <updated>2016-08-22T09:05:08-05:00</updated>
  <id>http://blog.vero4ka.info/</id>
  <author>
    <name><![CDATA[vero4ka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cómo hacer integración con Tpaga API usando Python]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/08/18/como-hacer-integracion-con-tpaga-api-usando-python/"/>
    <updated>2016-08-18T08:53:45-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/08/18/como-hacer-integracion-con-tpaga-api-usando-python</id>
    <content type="html"><![CDATA[<p><a href="https://tpaga.co/">Tpaga</a> es una plataforma que permite recibir pagos electrónicos. Tiene una esctuctura sencilla para entender y fácil para usar.</p>

<p>Para obtener nuestros claves de acceso y conectarnos con el API de Tpaga, creamos una cuenta en el &ldquo;sandbox&rdquo; de la plataforma: <a href="https://sandbox.tpaga.co/">sandbox.tpaga.co</a>.</p>

<p><img src="http://blog.vero4ka.info/images/tpaga_sandbox_login.png"></p>

<p>Al registrarnos podemos ver que ahora tenemos dos claves que podemos usar para la autenticación: <strong>Private Api Key</strong> y <strong>Public Api Key</strong>:</p>

<p><img src="http://blog.vero4ka.info/images/tpaga_sandbox_dashboard.png"></p>

<p>Tpaga tiene unos modelos básicos que nos permitirán organizar nuestros datos: <strong>Customers</strong> (Clientes), <strong>Credit Cards</strong> (Tarjetas de crédito) asociados a los Clientes y <strong>Charges</strong> (Transacciónes o cobros por tarjéta de crédito).</p>

<p>Ahora, cuando entendemos la estructura, podemos empezar a escribir nuestro cliente en Python. Primero instalamos la librería <code>requests</code> que nos permitirá hacer peticiones HTTP.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install requests
</span></code></pre></td></tr></table></div></figure>


<p>Tpaga, como muchos otros sitios web, acepta la autenticación mediante HTTP Basic Auth. La librería <code>requests</code> provee una forma fácil de usarla:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">TPAGA_PRIVATE_TOKEN</span> <span class="o">=</span> <span class="s">&#39;pk_test_qvbvuthlvqpijnr0elmtg5jh&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">tpaga_url</span> <span class="o">=</span> <span class="s">&#39;https://sandbox.tpaga.co/api/customer&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">tpaga_url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="p">{},</span> <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="n">TPAGA_PRIVATE_TOKEN</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">Response</span> <span class="p">[</span><span class="mi">201</span><span class="p">]</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Escribimos un cliente sencillo que nos permitirá conectarse al API de Tpaga y mandar peticiones:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">urllib</span> <span class="kn">import</span> <span class="n">parse</span> <span class="k">as</span> <span class="n">urlparse</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'><span class="n">TPAGA_PRIVATE_TOKEN</span> <span class="o">=</span> <span class="s">&#39;pk_test_qvbvuthlvqpijnr0elmtg5jh&#39;</span>
</span><span class='line'><span class="n">TPAGA_PUBLIC_TOKEN</span> <span class="o">=</span> <span class="s">&#39;d13fr8n7vhvkuch3lq2ds5qhjnd2pdd2&#39;</span>
</span><span class='line'><span class="n">TPAGA_API_URL</span> <span class="o">=</span> <span class="s">&#39;https://sandbox.tpaga.co/api/&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TpagaTestClient</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
</span><span class='line'>            <span class="bp">self</span><span class="p">,</span>
</span><span class='line'>            <span class="n">private_token</span><span class="o">=</span><span class="n">TPAGA_PRIVATE_TOKEN</span><span class="p">,</span>
</span><span class='line'>            <span class="n">public_token</span><span class="o">=</span><span class="n">TPAGA_PUBLIC_TOKEN</span><span class="p">,</span>
</span><span class='line'>            <span class="n">base_url</span><span class="o">=</span><span class="n">TPAGA_API_URL</span><span class="p">,</span>
</span><span class='line'>    <span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">base_url</span> <span class="o">=</span> <span class="n">base_url</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">private_token</span> <span class="o">=</span> <span class="n">private_token</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">public_token</span> <span class="o">=</span> <span class="n">public_token</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">api_post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">token</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">token</span><span class="p">:</span>
</span><span class='line'>            <span class="n">token</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">private_token</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
</span><span class='line'>            <span class="n">urlparse</span><span class="o">.</span><span class="n">urljoin</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">path</span><span class="p">),</span>
</span><span class='line'>            <span class="n">json</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">fail</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span>
</span><span class='line'>            <span class="s">&#39;Whoops, got</span><span class="se">\n\n</span><span class="s">STATUS: {}</span><span class="se">\n\n</span><span class="s">HEADERS: {}</span><span class="se">\n\n</span><span class="s">CONTENT: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">,</span>
</span><span class='line'>            <span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">json_from_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">expected_http_code</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">expected_http_code</span><span class="p">:</span>
</span><span class='line'>            <span class="n">expected_http_code</span> <span class="o">=</span> <span class="p">[</span><span class="mi">201</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">expected_http_code</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">fail</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>El método <code>__init__</code> nos va a inicializar nuestor cliente, <code>api_post</code> - mandar peticiones POST a la ruta especificada (<code>path</code>) del API, <code>json_from_response</code> - obtener un objeto JSON de la respuesta de API, <code>fail</code> - imprimir los detalles de la respuesta si la petición no ha terminado con éxito.</p>

<h3>Crear un cliente</h3>

<p>Para crear nuestor cliente, vamos a enviar una petición POST al endpoint <code>/customer</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TpagaTestClient</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_customer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">api_post</span><span class="p">(</span><span class="s">&#39;customer&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">json_from_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">client</span> <span class="o">=</span> <span class="n">TpagaTestClient</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">customer</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">create_customer</span><span class="p">({</span>
</span><span class='line'>    <span class="s">&#39;firstName&#39;</span><span class="p">:</span> <span class="s">&#39;Horns and Hoofs&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;email&#39;</span><span class="p">:</span> <span class="s">&#39;hornsandhoofs@example.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;phone&#39;</span><span class="p">:</span> <span class="s">&#39;012345678&#39;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">customer_token</span> <span class="o">=</span> <span class="n">customer</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;customer_token&#39;</span><span class="p">,</span> <span class="n">customer_token</span><span class="p">)</span>
</span><span class='line'><span class="n">customer_token</span> <span class="n">qoodmh04sh7ghpp58opn5g0hssg4slq0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Otros campos que podemos enviar para guardar nuestros clientes se puede encontrar aquí: <a href="https://tpaga.co/docs/swaggers/v2#!/Customer/createCustomer">tpaga.co/docs/swaggers/v2#!/Customer/createCustomer</a>.</p>

<p>En el dashboard de Tpaga podemos asegurarnos de que el ciente <a href="https://en.wikipedia.org/wiki/The_Little_Golden_Calf#Cultural_influence">&ldquo;Horns and Hoofs&rdquo;</a> fue creado exitosamente:</p>

<p><img src="http://blog.vero4ka.info/images/tpaga_dashboard_customers.png"></p>

<p>Teniendo un token de nuestro cliente, podemos agregarle una tarjeta de crédito.</p>

<h3>Registrar una tarhjeta de crédito y asociarla al cliente</h3>

<p>Creación de la tarjeta de crédito se realiza en dos pasos: tokenizar la tarjeta y asociarla un cliente.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TpagaTestClient</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tokenize_cc</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cc_name</span><span class="p">,</span> <span class="n">expiry_month</span><span class="p">,</span> <span class="n">expiry_year</span><span class="p">,</span> <span class="n">cc_num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">ccdata</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;primaryAccountNumber&#39;</span><span class="p">:</span> <span class="n">cc_num</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;expirationMonth&#39;</span><span class="p">:</span> <span class="n">expiry_month</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;expirationYear&#39;</span><span class="p">:</span> <span class="n">expiry_year</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;cardHolderName&#39;</span><span class="p">:</span> <span class="n">cc_name</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">api_post</span><span class="p">(</span><span class="s">&#39;tokenize/credit_card&#39;</span><span class="p">,</span> <span class="n">ccdata</span><span class="p">,</span> <span class="n">token</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">public_token</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">json_from_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">assoc_cc_to_customer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">customer_token</span><span class="p">,</span> <span class="n">cc_temp_token</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">cdata</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;token&#39;</span><span class="p">:</span> <span class="n">cc_temp_token</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">api_post</span><span class="p">(</span>
</span><span class='line'>            <span class="s">&#39;customer/{}/credit_card_token&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">customer_token</span><span class="p">),</span> <span class="n">cdata</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">json_from_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">tokenized_credit_card</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">tokenize_cc</span><span class="p">(</span>
</span><span class='line'>    <span class="n">cc_name</span><span class="o">=</span><span class="s">&#39;Pepito Perez&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">expiry_month</span><span class="o">=</span><span class="s">&quot;08&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">expiry_year</span><span class="o">=</span><span class="s">&quot;2020&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">cc_num</span><span class="o">=</span><span class="s">&#39;4111111111111111&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">cc_temp_token</span> <span class="o">=</span> <span class="n">tokenized_credit_card</span><span class="p">[</span><span class="s">&#39;token&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">credit_card</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">assoc_cc_to_customer</span><span class="p">(</span>
</span><span class='line'>    <span class="n">customer_token</span><span class="o">=</span><span class="n">customer_token</span><span class="p">,</span>
</span><span class='line'>    <span class="n">cc_temp_token</span><span class="o">=</span><span class="n">cc_temp_token</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">credit_card_token</span> <span class="o">=</span> <span class="n">credit_card</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;credit_card_token&#39;</span><span class="p">,</span> <span class="n">credit_card_token</span><span class="p">)</span>
</span><span class='line'><span class="n">credit_card_token</span> <span class="mi">2</span><span class="n">k54foql0hki0ot7avrg9nhpvbpqam55</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mirando la tabla de <a href="https://sandbox.tpaga.co/merchantDashboard/cards">sandbox.tpaga.co/merchantDashboard/cards</a> vemos que nuestra tarjeta quedó registrada con Tpaga.</p>

<h3>Realizar el pago por la tarjeta de crédito</h3>

<p>Con el token de la tarjeta de crédito, que obtuvimos en el paso anterior, ahora podemos realizar pagos. Para eso enviemos una petición POST al <a href="https://tpaga.co/docs/swaggers/v2#!/Charge/addCreditCardCharge">addCreditCardCharge</a> endpoint con los siguientes parametros:</p>

<ul>
<li><code>orderId</code> - nuestro id interno que asociamos al pago, que luego nos ayudaría a identificar la transacción en el dashboard de Tpaga;</li>
<li><code>amount</code>- cantidad de dinero para cobrar,</li>
<li><code>currency</code>- tipo de moneda, por ejemplo, &lsquo;COP&rsquo;,</li>
<li><code>creditCard</code> - token de la tarjeta de crédito.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TpagaTestClient</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">charge_cc</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cc_token</span><span class="p">,</span> <span class="n">order_id</span><span class="o">=</span><span class="s">&#39;BRG-2&#39;</span><span class="p">,</span> <span class="n">amount</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
</span><span class='line'>        <span class="n">cdata</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>              <span class="s">&#39;orderId&#39;</span><span class="p">:</span> <span class="n">order_id</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&#39;currency&#39;</span><span class="p">:</span> <span class="s">&#39;COP&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&#39;taxAmount&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="s">&#39;One bridge in good condition.&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&#39;installments&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&#39;amount&#39;</span><span class="p">:</span> <span class="n">amount</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&#39;creditCard&#39;</span><span class="p">:</span> <span class="n">cc_token</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">api_post</span><span class="p">(</span><span class="s">&#39;charge/credit_card&#39;</span><span class="p">,</span> <span class="n">cdata</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">json_from_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">refund_cc</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cc_charge_id</span><span class="p">):</span>
</span><span class='line'>        <span class="n">cdata</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="n">cc_charge_id</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">api_post</span><span class="p">(</span><span class="s">&#39;refund/credit_card&#39;</span><span class="p">,</span> <span class="n">cdata</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">json_from_response</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">expected_http_code</span><span class="o">=</span><span class="p">[</span><span class="mi">202</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">charge_cc_response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">charge_cc</span><span class="p">(</span><span class="n">cc_token</span><span class="o">=</span><span class="n">credit_card_token</span><span class="p">,</span> <span class="n">amount</span><span class="o">=</span><span class="mi">4500</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">cc_charge_id</span> <span class="o">=</span> <span class="n">charge_cc_response</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;charge_cc_response&#39;</span><span class="p">,</span> <span class="n">charge_cc_response</span><span class="p">)</span>
</span><span class='line'><span class="n">charge_cc_response</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="s">&#39;1rnfu463258eph0mlqli4105mjb85kut&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;creditCard&#39;</span><span class="p">:</span> <span class="s">&#39;ifmjd9rbe8peqdjh09pln702306nfniu&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;thirdPartyId&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;installments&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;tpagaFeeAmount&#39;</span><span class="p">:</span> <span class="s">&#39;868.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;customer&#39;</span><span class="p">:</span> <span class="s">&#39;gl01l74skk0po9afrjiaaclt0hr5acsh&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;iacAmount&#39;</span><span class="p">:</span> <span class="s">&#39;0.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;transactionInfo&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;authorizationCode&#39;</span><span class="p">:</span> <span class="s">&#39;723045&#39;</span><span class="p">,</span> <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;authorized&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;netAmount&#39;</span><span class="p">:</span> <span class="s">&#39;3545.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;tipAmount&#39;</span><span class="p">:</span> <span class="s">&#39;0.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;reteIvaAmount&#39;</span><span class="p">:</span> <span class="s">&#39;0.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;reteIcaAmount&#39;</span><span class="p">:</span> <span class="s">&#39;19.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;paid&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;reteRentaAmount&#39;</span><span class="p">:</span> <span class="s">&#39;68.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;paymentTransaction&#39;</span><span class="p">:</span> <span class="s">&#39;tta2hlk0e5n5dgr4kggm5j6vv8qoh3jP&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;orderId&#39;</span><span class="p">:</span> <span class="s">&#39;BRG-2&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="s">&#39;One bridge in good condition.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;currency&#39;</span><span class="p">:</span> <span class="s">&#39;COP&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;errorMessage&#39;</span><span class="p">:</span> <span class="s">&#39;Approved&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;taxAmount&#39;</span><span class="p">:</span> <span class="s">&#39;0.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;errorCode&#39;</span><span class="p">:</span> <span class="s">&#39;00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;amount&#39;</span><span class="p">:</span> <span class="s">&#39;4500.00&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si el pago fue exitoso, el código de respuesta es <code>201</code> y en el JSON podemos ver que la llave <code>paid</code> es <code>True</code> y <code>amount</code> es igual al valor cobrado de la tarjeta.</p>

<p>En el caso cuando el código de respuesta es <code>402</code>, tendríamos fijarnos en los valores de <code>errorCode</code> y <code>errorMessage</code> para entender qué pasó con la transacción. Por ejemplo, el código de error <code>43</code> significa que el dueño de la tarjeta la reportó como robada, y <code>61</code> - que el monto máximo de tarjeta fue excedido.</p>

<p>En otros casos necesitaremos verificar que los datos que pasamos en la petición sean válidos y tengan todos los valores necesarios.</p>

<h3>Revertir el pago</h3>

<p>Los bancos nos permiten revertir el pago dentro de 24 horas después de la transacción. Para hacerlo debemos mandar token de la transacción que queremos revertir al <a href="https://tpaga.co/docs/swaggers/v2#!/Credit_Card/refundCreditCardCharge">refundCreditCardCharge</a> endpoint.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">refund_cc_response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">refund_cc</span><span class="p">(</span><span class="n">cc_charge_id</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;refund_cc_response&#39;</span><span class="p">,</span> <span class="n">refund_cc_response</span><span class="p">)</span>
</span><span class='line'><span class="n">refund_cc_response</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="s">&#39;1rnfu463258eph0mlqli4105mjb85kut&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;creditCard&#39;</span><span class="p">:</span> <span class="s">&#39;ifmjd9rbe8peqdjh09pln702306nfniu&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;thirdPartyId&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;installments&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;tpagaFeeAmount&#39;</span><span class="p">:</span> <span class="s">&#39;868.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;customer&#39;</span><span class="p">:</span> <span class="s">&#39;gl01l74skk0po9afrjiaaclt0hr5acsh&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;iacAmount&#39;</span><span class="p">:</span> <span class="s">&#39;0.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;transactionInfo&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;authorizationCode&#39;</span><span class="p">:</span> <span class="s">&#39;723045&#39;</span><span class="p">,</span> <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;voided&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;netAmount&#39;</span><span class="p">:</span> <span class="s">&#39;3545.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;tipAmount&#39;</span><span class="p">:</span> <span class="s">&#39;0.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;reteIvaAmount&#39;</span><span class="p">:</span> <span class="s">&#39;0.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;reteIcaAmount&#39;</span><span class="p">:</span> <span class="s">&#39;19.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;paid&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;reteRentaAmount&#39;</span><span class="p">:</span> <span class="s">&#39;68.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;paymentTransaction&#39;</span><span class="p">:</span> <span class="s">&#39;tta2hlk0e5n5dgr4kggm5j6vv8qoh3jP&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;orderId&#39;</span><span class="p">:</span> <span class="s">&#39;BRG-2&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="s">&#39;One bridge in good condition.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;currency&#39;</span><span class="p">:</span> <span class="s">&#39;COP&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;errorMessage&#39;</span><span class="p">:</span> <span class="s">&#39;Approved&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;taxAmount&#39;</span><span class="p">:</span> <span class="s">&#39;0.00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;errorCode&#39;</span><span class="p">:</span> <span class="s">&#39;00&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;amount&#39;</span><span class="p">:</span> <span class="s">&#39;4500.00&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>El JSON que nos devolvió Tpaga <code>transactionInfo.status</code> aparece como <code>voided</code> y el valor de <code>paid</code> ahora es falso:</p>

<p><img src="http://blog.vero4ka.info/images/tpaga_dashboard_refund.png"></p>

<p>Enlaces:</p>

<ul>
<li>Documentación de Tpaga: <a href="https://tpaga.co/docs/swaggers/v2">tpaga.co/docs/swaggers/v2</a></li>
<li>Tpaga FAQ <a href="https://tpaga.zendesk.com/hc/es">tpaga.zendesk.com/hc/es</a></li>
<li>Documentación para la librería <a href="http://docs.python-requests.org/en/master/">Requests: HTTP for Humans</a></li>
</ul>


<p>Muchas gracias a <a href="https://twitter.com/jerojasro">@jerojasro</a> por su ayuda y paciencia.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Como Hacer Integracion Con Tpaga Api Usando Python]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/08/18/como-hacer-integracion-con-tpaga-api-usando-python/"/>
    <updated>2016-08-18T00:00:00-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/08/18/como-hacer-integracion-con-tpaga-api-usando-python</id>
    <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><meta name="date" content="2016-08-18 08:53:45 -0500">
<meta name="layout" content="post">
<meta name="categories" content="[Python, Tpaga, API, requests]">
<meta name="comments" content="true"><style>body {
  width: 45em;
  border: 1px solid #ddd;
  outline: 1300px solid #fff;
  margin: 16px auto;
}

body .markdown-body
{
  padding: 30px;
}

@font-face {
  font-family: fontawesome-mini;
  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');
}

@font-face {
  font-family: octicons-anchor;
  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');
}

.markdown-body {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  color: #333333;
  overflow: hidden;
  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif;
  font-size: 16px;
  line-height: 1.6;
  word-wrap: break-word;
}

.markdown-body a {
  background: transparent;
}

.markdown-body a:active,
.markdown-body a:hover {
  outline: 0;
}

.markdown-body b,
.markdown-body strong {
  font-weight: bold;
}

.markdown-body mark {
  background: #ff0;
  color: #000;
  font-style: italic;
  font-weight: bold;
}

.markdown-body sub,
.markdown-body sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
.markdown-body sup {
  top: -0.5em;
}
.markdown-body sub {
  bottom: -0.25em;
}

.markdown-body h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

.markdown-body img {
  border: 0;
}

.markdown-body hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

.markdown-body pre {
  overflow: auto;
}

.markdown-body code,
.markdown-body kbd,
.markdown-body pre,
.markdown-body samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

.markdown-body input {
  color: inherit;
  font: inherit;
  margin: 0;
}

.markdown-body html input[disabled] {
  cursor: default;
}

.markdown-body input {
  line-height: normal;
}

.markdown-body input[type="checkbox"] {
  box-sizing: border-box;
  padding: 0;
}

.markdown-body table {
  border-collapse: collapse;
  border-spacing: 0;
}

.markdown-body td,
.markdown-body th {
  padding: 0;
}

.markdown-body .codehilitetable {
  border: 0;
  border-spacing: 0;
}

.markdown-body .codehilitetable tr {
  border: 0;
}

.markdown-body .codehilitetable pre,
.markdown-body .codehilitetable div.codehilite {
  margin: 0;
}

.markdown-body .linenos,
.markdown-body .code,
.markdown-body .codehilitetable td {
  border: 0;
  padding: 0;
}

.markdown-body td:not(.linenos) .linenodiv {
  padding: 0 !important;
}

.markdown-body .code {
  width: 100%;
}

.markdown-body .linenos div pre,
.markdown-body .linenodiv pre,
.markdown-body .linenodiv {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-left-radius: 3px;
  -webkit-border-bottom-left-radius: 3px;
  -moz-border-radius-topleft: 3px;
  -moz-border-radius-bottomleft: 3px;
  border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
}

.markdown-body .code div pre,
.markdown-body .code div {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-right-radius: 3px;
  -webkit-border-bottom-right-radius: 3px;
  -moz-border-radius-topright: 3px;
  -moz-border-radius-bottomright: 3px;
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px;
}

.markdown-body * {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body input {
  font: 13px Helvetica, arial, freesans, clean, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";
  line-height: 1.4;
}

.markdown-body a {
  color: #4183c4;
  text-decoration: none;
}

.markdown-body a:hover,
.markdown-body a:focus,
.markdown-body a:active {
  text-decoration: underline;
}

.markdown-body hr {
  height: 0;
  margin: 15px 0;
  overflow: hidden;
  background: transparent;
  border: 0;
  border-bottom: 1px solid #ddd;
}

.markdown-body hr:before,
.markdown-body hr:after {
  display: table;
  content: " ";
}

.markdown-body hr:after {
  clear: both;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  margin-top: 15px;
  margin-bottom: 15px;
  line-height: 1.1;
}

.markdown-body h1 {
  font-size: 30px;
}

.markdown-body h2 {
  font-size: 21px;
}

.markdown-body h3 {
  font-size: 16px;
}

.markdown-body h4 {
  font-size: 14px;
}

.markdown-body h5 {
  font-size: 12px;
}

.markdown-body h6 {
  font-size: 11px;
}

.markdown-body blockquote {
  margin: 0;
}

.markdown-body ul,
.markdown-body ol {
  padding: 0;
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body ol ol,
.markdown-body ul ol {
  list-style-type: lower-roman;
}

.markdown-body ul ul ol,
.markdown-body ul ol ol,
.markdown-body ol ul ol,
.markdown-body ol ol ol {
  list-style-type: lower-alpha;
}

.markdown-body dd {
  margin-left: 0;
}

.markdown-body code,
.markdown-body pre,
.markdown-body samp {
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  font-size: 12px;
}

.markdown-body pre {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body kbd {
  background-color: #e7e7e7;
  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);
  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);
  background-image: linear-gradient(#fefefe, #e7e7e7);
  background-repeat: repeat-x;
  border-radius: 2px;
  border: 1px solid #cfcfcf;
  color: #000;
  padding: 3px 5px;
  line-height: 10px;
  font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;
  display: inline-block;
}

.markdown-body>*:first-child {
  margin-top: 0 !important;
}

.markdown-body>*:last-child {
  margin-bottom: 0 !important;
}

.markdown-body .headeranchor-link {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  display: block;
  padding-right: 6px;
  padding-left: 30px;
  margin-left: -30px;
}

.markdown-body .headeranchor-link:focus {
  outline: none;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  position: relative;
  margin-top: 1em;
  margin-bottom: 16px;
  font-weight: bold;
  line-height: 1.4;
}

.markdown-body h1 .headeranchor,
.markdown-body h2 .headeranchor,
.markdown-body h3 .headeranchor,
.markdown-body h4 .headeranchor,
.markdown-body h5 .headeranchor,
.markdown-body h6 .headeranchor {
  display: none;
  color: #000;
  vertical-align: middle;
}

.markdown-body h1:hover .headeranchor-link,
.markdown-body h2:hover .headeranchor-link,
.markdown-body h3:hover .headeranchor-link,
.markdown-body h4:hover .headeranchor-link,
.markdown-body h5:hover .headeranchor-link,
.markdown-body h6:hover .headeranchor-link {
  height: 1em;
  padding-left: 8px;
  margin-left: -30px;
  line-height: 1;
  text-decoration: none;
}

.markdown-body h1:hover .headeranchor-link .headeranchor,
.markdown-body h2:hover .headeranchor-link .headeranchor,
.markdown-body h3:hover .headeranchor-link .headeranchor,
.markdown-body h4:hover .headeranchor-link .headeranchor,
.markdown-body h5:hover .headeranchor-link .headeranchor,
.markdown-body h6:hover .headeranchor-link .headeranchor {
  display: inline-block;
}

.markdown-body h1 {
  padding-bottom: 0.3em;
  font-size: 2.25em;
  line-height: 1.2;
  border-bottom: 1px solid #eee;
}

.markdown-body h2 {
  padding-bottom: 0.3em;
  font-size: 1.75em;
  line-height: 1.225;
  border-bottom: 1px solid #eee;
}

.markdown-body h3 {
  font-size: 1.5em;
  line-height: 1.43;
}

.markdown-body h4 {
  font-size: 1.25em;
}

.markdown-body h5 {
  font-size: 1em;
}

.markdown-body h6 {
  font-size: 1em;
  color: #777;
}

.markdown-body p,
.markdown-body blockquote,
.markdown-body ul,
.markdown-body ol,
.markdown-body dl,
.markdown-body table,
.markdown-body pre,
.markdown-body .admonition {
  margin-top: 0;
  margin-bottom: 16px;
}

.markdown-body hr {
  height: 4px;
  padding: 0;
  margin: 16px 0;
  background-color: #e7e7e7;
  border: 0 none;
}

.markdown-body ul,
.markdown-body ol {
  padding-left: 2em;
}

.markdown-body ul ul,
.markdown-body ul ol,
.markdown-body ol ol,
.markdown-body ol ul {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body li>p {
  margin-top: 16px;
}

.markdown-body dl {
  padding: 0;
}

.markdown-body dl dt {
  padding: 0;
  margin-top: 16px;
  font-size: 1em;
  font-style: italic;
  font-weight: bold;
}

.markdown-body dl dd {
  padding: 0 16px;
  margin-bottom: 16px;
}

.markdown-body blockquote {
  padding: 0 15px;
  color: #777;
  border-left: 4px solid #ddd;
}

.markdown-body blockquote>:first-child {
  margin-top: 0;
}

.markdown-body blockquote>:last-child {
  margin-bottom: 0;
}

.markdown-body table {
  display: block;
  width: 100%;
  overflow: auto;
  word-break: normal;
  word-break: keep-all;
}

.markdown-body table th {
  font-weight: bold;
}

.markdown-body table th,
.markdown-body table td {
  padding: 6px 13px;
  border: 1px solid #ddd;
}

.markdown-body table tr {
  background-color: #fff;
  border-top: 1px solid #ccc;
}

.markdown-body table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

.markdown-body img {
  max-width: 100%;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body code,
.markdown-body samp {
  padding: 0;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
  margin: 0;
  font-size: 85%;
  background-color: rgba(0,0,0,0.04);
  border-radius: 3px;
}

.markdown-body code:before,
.markdown-body code:after {
  letter-spacing: -0.2em;
  content: "\00a0";
}

.markdown-body pre>code {
  padding: 0;
  margin: 0;
  font-size: 100%;
  word-break: normal;
  white-space: pre;
  background: transparent;
  border: 0;
}

.markdown-body .codehilite {
  margin-bottom: 16px;
}

.markdown-body .codehilite pre,
.markdown-body pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f7f7f7;
  border-radius: 3px;
}

.markdown-body .codehilite pre {
  margin-bottom: 0;
  word-break: normal;
}

.markdown-body pre {
  word-wrap: normal;
}

.markdown-body pre code {
  display: inline;
  max-width: initial;
  padding: 0;
  margin: 0;
  overflow: initial;
  line-height: inherit;
  word-wrap: normal;
  background-color: transparent;
  border: 0;
}

.markdown-body pre code:before,
.markdown-body pre code:after {
  content: normal;
}

/* Admonition */
.markdown-body .admonition {
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  position: relative;
  border-radius: 3px;
  border: 1px solid #e0e0e0;
  border-left: 6px solid #333;
  padding: 10px 10px 10px 30px;
}

.markdown-body .admonition table {
  color: #333;
}

.markdown-body .admonition p {
  padding: 0;
}

.markdown-body .admonition-title {
  font-weight: bold;
  margin: 0;
}

.markdown-body .admonition>.admonition-title {
  color: #333;
}

.markdown-body .attention>.admonition-title {
  color: #a6d796;
}

.markdown-body .caution>.admonition-title {
  color: #d7a796;
}

.markdown-body .hint>.admonition-title {
  color: #96c6d7;
}

.markdown-body .danger>.admonition-title {
  color: #c25f77;
}

.markdown-body .question>.admonition-title {
  color: #96a6d7;
}

.markdown-body .note>.admonition-title {
  color: #d7c896;
}

.markdown-body .admonition:before,
.markdown-body .attention:before,
.markdown-body .caution:before,
.markdown-body .hint:before,
.markdown-body .danger:before,
.markdown-body .question:before,
.markdown-body .note:before {
  font: normal normal 16px fontawesome-mini;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  line-height: 1.5;
  color: #333;
  position: absolute;
  left: 0;
  top: 0;
  padding-top: 10px;
  padding-left: 10px;
}

.markdown-body .admonition:before {
  content: "\f056\00a0";
  color: 333;
}

.markdown-body .attention:before {
  content: "\f058\00a0";
  color: #a6d796;
}

.markdown-body .caution:before {
  content: "\f06a\00a0";
  color: #d7a796;
}

.markdown-body .hint:before {
  content: "\f05a\00a0";
  color: #96c6d7;
}

.markdown-body .danger:before {
  content: "\f057\00a0";
  color: #c25f77;
}

.markdown-body .question:before {
  content: "\f059\00a0";
  color: #96a6d7;
}

.markdown-body .note:before {
  content: "\f040\00a0";
  color: #d7c896;
}

.markdown-body .admonition::after {
  content: normal;
}

.markdown-body .attention {
  border-left: 6px solid #a6d796;
}

.markdown-body .caution {
  border-left: 6px solid #d7a796;
}

.markdown-body .hint {
  border-left: 6px solid #96c6d7;
}

.markdown-body .danger {
  border-left: 6px solid #c25f77;
}

.markdown-body .question {
  border-left: 6px solid #96a6d7;
}

.markdown-body .note {
  border-left: 6px solid #d7c896;
}

.markdown-body .admonition>*:first-child {
  margin-top: 0 !important;
}

.markdown-body .admonition>*:last-child {
  margin-bottom: 0 !important;
}

/* progress bar*/
.markdown-body .progress {
  display: block;
  width: 300px;
  margin: 10px 0;
  height: 24px;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #ededed;
  position: relative;
  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);
}

.markdown-body .progress-label {
  position: absolute;
  text-align: center;
  font-weight: bold;
  width: 100%; margin: 0;
  line-height: 24px;
  color: #333;
  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;
  -webkit-font-smoothing: antialiased !important;
  white-space: nowrap;
  overflow: hidden;
}

.markdown-body .progress-bar {
  height: 24px;
  float: left;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #96c6d7;
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);
  background-size: 30px 30px;
  background-image: -webkit-linear-gradient(
    135deg, rgba(255, 255, 255, .4) 27%,
    transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%,
    transparent 77%, transparent
  );
  background-image: -moz-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -ms-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -o-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
}

.markdown-body .progress-100plus .progress-bar {
  background-color: #a6d796;
}

.markdown-body .progress-80plus .progress-bar {
  background-color: #c6d796;
}

.markdown-body .progress-60plus .progress-bar {
  background-color: #d7c896;
}

.markdown-body .progress-40plus .progress-bar {
  background-color: #d7a796;
}

.markdown-body .progress-20plus .progress-bar {
  background-color: #d796a6;
}

.markdown-body .progress-0plus .progress-bar {
  background-color: #c25f77;
}

.markdown-body .candystripe-animate .progress-bar{
  -webkit-animation: animate-stripes 3s linear infinite;
  -moz-animation: animate-stripes 3s linear infinite;
  animation: animate-stripes 3s linear infinite;
}

@-webkit-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@-moz-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

.markdown-body .gloss .progress-bar {
  box-shadow:
    inset 0 4px 12px rgba(255, 255, 255, .7),
    inset 0 -12px 0 rgba(0, 0, 0, .05);
}

/* Multimarkdown Critic Blocks */
.markdown-body .critic_mark {
  background: #ff0;
}

.markdown-body .critic_delete {
  color: #c82829;
  text-decoration: line-through;
}

.markdown-body .critic_insert {
  color: #718c00 ;
  text-decoration: underline;
}

.markdown-body .critic_comment {
  color: #8e908c;
  font-style: italic;
}

.markdown-body .headeranchor {
  font: normal normal 16px octicons-anchor;
  line-height: 1;
  display: inline-block;
  text-decoration: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.headeranchor:before {
  content: '\f05c';
}

.markdown-body .task-list-item {
  list-style-type: none;
}

.markdown-body .task-list-item+.task-list-item {
  margin-top: 3px;
}

.markdown-body .task-list-item input {
  margin: 0 4px 0.25em -20px;
  vertical-align: middle;
}

/* Media */
@media only screen and (min-width: 480px) {
  .markdown-body {
    font-size:14px;
  }
}

@media only screen and (min-width: 768px) {
  .markdown-body {
    font-size:16px;
  }
}

@media print {
  .markdown-body * {
    background: transparent !important;
    color: black !important;
    filter:none !important;
    -ms-filter: none !important;
  }

  .markdown-body {
    font-size:12pt;
    max-width:100%;
    outline:none;
    border: 0;
  }

  .markdown-body a,
  .markdown-body a:visited {
    text-decoration: underline;
  }

  .markdown-body .headeranchor-link {
    display: none;
  }

  .markdown-body a[href]:after {
    content: " (" attr(href) ")";
  }

  .markdown-body abbr[title]:after {
    content: " (" attr(title) ")";
  }

  .markdown-body .ir a:after,
  .markdown-body a[href^="javascript:"]:after,
  .markdown-body a[href^="#"]:after {
    content: "";
  }

  .markdown-body pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  .markdown-body pre,
  .markdown-body blockquote {
    border: 1px solid #999;
    padding-right: 1em;
    page-break-inside: avoid;
  }

  .markdown-body .progress,
  .markdown-body .progress-bar {
    -moz-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none;
  }

  .markdown-body .progress {
    border: 1px solid #ddd;
  }

  .markdown-body .progress-bar {
    height: 22px;
    border-right: 1px solid #ddd;
  }

  .markdown-body tr,
  .markdown-body img {
    page-break-inside: avoid;
  }

  .markdown-body img {
    max-width: 100% !important;
  }

  .markdown-body p,
  .markdown-body h2,
  .markdown-body h3 {
    orphans: 3;
    widows: 3;
  }

  .markdown-body h2,
  .markdown-body h3 {
    page-break-after: avoid;
  }
}
</style><title>"Cómo hacer integracion con Tpaga API usando Python"</title></head><body><article class="markdown-body"><p><a href="https://tpaga.co/">Tpaga</a> es una plataforma que permite recibir pagos electrónicos. Tiene una esctuctura sencilla para entender y </p>
<p>Para obtener nuestros claves pública y privada para conectarnos con el API de Tpaga y hacer pruebas, primero creamos cuanta en el &ldquo;sandbox&rdquo; de la plataforma: <a href="https://sandbox.tpaga.co/">sandbox.tpaga.co</a>.</p>
<p><img src="http://blog.vero4ka.info/images/tpaga_sandbox_login.png"></p>
<p>Al registrarnos podemos ver que ahora tenemos dos claves que vamos a usar para la autenticación: <strong>Private Api Key</strong> y <strong>Public Api Key</strong>:</p>
<p><img src="http://blog.vero4ka.info/images/tpaga_sandbox_dashboard.png"></p>
<p>Tpaga tiene unos modelos básicos que nos permitirán estructurar nuestros datos: <strong>Customers</strong> (Clientes), <strong>Credit Cards</strong> (Tarjatas de crédito) asociados a los Clientes y <strong>Charges</strong> (Transacciónes).</p>
<p>Ahora, cuando entendemos la estructura, podemos empezar a escribir nuestro cliente en Python. Primero instalamos la librería <code>requests</code> que nos permiritá hacer peticiones HTTP:</p>
<pre><code class="bash">$ pip install requests
</code></pre>

<p>Tpaga, como muchos otros sitios web, acepta la autenticación mediante HTTP Basic Auth. La librería <code>requests</code> provee una forma fácil de usarla:</p>
<pre><code class="python">&gt;&gt;&gt; import requests
&gt;&gt;&gt; TPAGA_PRIVATE_TOKEN = 'pk_test_qvbvuthlvqpijnr0elmtg5jh'
&gt;&gt;&gt; tpaga_url = 'https://sandbox.tpaga.co/api/customer'
&gt;&gt;&gt; requests.post(tpaga_url, json={}, auth=(TPAGA_PRIVATE_TOKEN, ''))
&lt;Response [201]&gt;
</code></pre>

<p>Escribimos un cliente sencillo que nos permitirá conectarse al API de Tpaga y mandar peticiones:</p>
<pre><code class="python">from urllib import parse as urlparse
import requests

TPAGA_PRIVATE_TOKEN = 'pk_test_qvbvuthlvqpijnr0elmtg5jh'
TPAGA_PUBLIC_TOKEN = 'd13fr8n7vhvkuch3lq2ds5qhjnd2pdd2'
TPAGA_API_URL = 'https://sandbox.tpaga.co/api/'

class TpagaTestClient:
    def __init__(
            self,
            private_token=TPAGA_PRIVATE_TOKEN,
            public_token=TPAGA_PUBLIC_TOKEN,
            base_url=TPAGA_API_URL,
    ):
        self.base_url = base_url
        self.private_token = private_token
        self.public_token = public_token


    def api_post(self, path, data, token=None):
        if not token:
            token = self.private_token
        return requests.post(
            urlparse.urljoin(self.base_url, path),
            json=data, auth=(token, ''),
        )

    def fail(self, response):
        raise Exception(
            'Whoops, got\n\nSTATUS: {}\n\nHEADERS: {}\n\nCONTENT: {}'.format(
                response.status_code, 
                response.headers, 
                response.content,
            ))

    def json_from_response(self, response, expected_http_code=None):
        if not expected_http_code:
            expected_http_code = [201]
        if response.status_code not in expected_http_code:
            self.fail(response)
        if not response.content:
            return None
        return response.json()

</code></pre>

<p>El método <code>__init__</code> nos va a inicializar nuestor cliente, <code>api_post``- mandar peticiones POST a la ruta especificada (</code>path<code>) del API,</code>json_from_response<code>- obtener un objeto JSON de la respuesta de API, `fail</code>- imprimir los detalles de la respuesta si la petición no terminó con éxito.</p>
<h3 id="crear-un-cliente"><a name="user-content-crear-un-cliente" href="#crear-un-cliente" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>Crear un cliente</h3>
<p>Para crear un cliente, vamos a entiar una petición POST al endpoint <code>/customer</code>:</p>
<pre><code>&gt;&gt; client = TpagaTestClient()
&gt;&gt; customer = client.create_customer({
    'firstName': 'Horns and Hoofs',
    'email': 'hornsandhoofs@example.com',
    'phone': '012345678'
})
&gt;&gt; customer_token = customer['id']
&gt;&gt; print('customer_token', customer_token)
customer_token qoodmh04sh7ghpp58opn5g0hssg4slq0
</code></pre>

<p><img src="http://blog.vero4ka.info/images/tpaga_sandbox_dashboard.png"></p>
<p>Otros campos que podemos enviar para guardar nuestros clientes se puede encontrar aquí: <a href="https://tpaga.co/docs/swaggers/v2#!/Customer/createCustomer">tpaga.co/docs/swaggers/v2#!/Customer/createCustomer</a>.</p>
<p>En el dashboard de Tpaga podemos ver que el cliente fue creado con éxitosamente:</p>
<p>Teniendo un token de nuestro cliente, podemos agregarle una tarjeta de crédito.</p>
<h3 id="registrar-una-tarhjeta-de-credito-y-asociarla-al-cliente"><a name="user-content-registrar-una-tarhjeta-de-credito-y-asociarla-al-cliente" href="#registrar-una-tarhjeta-de-credito-y-asociarla-al-cliente" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>Registrar una tarhjeta de crédito y asociarla al cliente</h3>
<p>Creación de la tarjeta de crédito se realiza en dos pasos: tokenizar la tarjeta y asociarla un cliente.</p>
<h3 id="realizar-el-pago-por-la-tarjeta-de-credito"><a name="user-content-realizar-el-pago-por-la-tarjeta-de-credito" href="#realizar-el-pago-por-la-tarjeta-de-credito" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>Realizar el pago por la tarjeta de crédito</h3>
<p>Con el token de la tarjeta de crédito, que obtuvimos en el paso anterior, ahora podemos realizar pagos. Para esto enviemos una petición POST el <a href="https://tpaga.co/docs/swaggers/v2#!/Charge/addCreditCardCharge">addCreditCardCharge</a> endpoint con los siguientes paramentros:</p>
<ul>
<li><code>orderId</code> - nuestro id interno que asociamos al pago, que luego nos ayudaría identificar la transacción en el dashboard de Tpaga;</li>
<li><code>amount</code>- cantidad de dinero para cobrar,</li>
<li><code>currency</code>- tipo de moneda, por ejemplo, &lsquo;COP&rsquo;,</li>
<li><code>creditCard</code> - token de la tarjeta de crédito.</li>
</ul>
<p>Enlaces:</p>
<ul>
<li>Documentación de Tpaga: <a href="https://tpaga.co/docs/swaggers/v2">tpaga.co/docs/swaggers/v2</a></li>
<li>Tpaga FAQ <a href="https://tpaga.zendesk.com/hc/es">tpaga.zendesk.com/hc/es</a></li>
<li>Documentación para la librería <a href="http://docs.python-requests.org/en/master/">Requests: HTTP for Humans</a></li>
</ul></article></body></html>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoreo de acciones de usuarios en Flask (SQLAlchemy)]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/07/22/monitoreo-de-acciones-de-usuarios-en-flask-sqlalchemy/"/>
    <updated>2016-07-22T08:23:58-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/07/22/monitoreo-de-acciones-de-usuarios-en-flask-sqlalchemy</id>
    <content type="html"><![CDATA[<p>Suponemos que en nuestro proyecto de Flask hay un modelo <code>Client</code> definidao usando <a href="http://flask-sqlalchemy.pocoo.org/">Flask-SQLAlchemy</a> y queremos monetorear los cambios que se realizan sobre los objetos de ese modelo.</p>

<p>Para esto agregamos tres señales:</p>

<figure class='code'><figcaption><span>models.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">event</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">main.signals</span> <span class="kn">import</span> <span class="n">receive_before_update</span><span class="p">,</span> <span class="n">receive_before_insert</span><span class="p">,</span> <span class="n">receive_before_delete</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Client</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>    <span class="n">email</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">phone</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">event</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">Client</span><span class="p">,</span> <span class="s">&#39;before_insert&#39;</span><span class="p">,</span> <span class="n">receive_before_insert</span><span class="p">)</span>
</span><span class='line'><span class="n">event</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">Client</span><span class="p">,</span> <span class="s">&#39;before_update&#39;</span><span class="p">,</span> <span class="n">receive_before_update</span><span class="p">)</span>
</span><span class='line'><span class="n">event</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">Client</span><span class="p">,</span> <span class="s">&#39;before_delete&#39;</span><span class="p">,</span> <span class="n">receive_before_delete</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>EN el gódigo de cada señal llamamos los métodos <code>inspect()</code> y <code>get_history()</code> para detectar los cambios sobre el objeto:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">state</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">inspect</span><span class="p">(</span><span class="n">client_object</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">attr</span> <span class="ow">in</span> <span class="n">state</span><span class="o">.</span><span class="n">attrs</span><span class="p">:</span>
</span><span class='line'>     <span class="n">hist</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="n">get_history</span><span class="p">(</span><span class="n">attr</span><span class="o">.</span><span class="n">key</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Por ejemplo, para el atributo <code>name</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">&#39;added&#39;:</span> <span class="err">[&#39;Company</span> <span class="err">A&#39;],</span>
</span><span class='line'>    <span class="err">&#39;deleted&#39;:</span> <span class="err">[&#39;Company</span> <span class="err">B&#39;],</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>El mégoto <code>get_history()</code> nos devuelve un objeto <code>sqlalchemy.orm.attributes.History</code> que tiene los siguientes atributos:</p>

<ul>
<li><code>added</code> - listado de valores agregados al atributo de nuestro objeto</li>
<li><code>deleted</code> - listado de valores eliminados del atributo de nuestro objeto</li>
<li><code>unchanged</code> - listado de valores del atributo de nuestro objeto que se quedaron intactos</li>
<li><code>has_changes()</code> - método que retorna <code>True</code> si no habían ningunos cambios de valor de nuestro atributo.</li>
</ul>


<p>Ahora, usando la variable <code>current_user</code> de la biblioteca <a href="https://flask-login.readthedocs.io/">Flask-Login</a>, podemos guargar el usuario que realizó los cambios:</p>

<figure class='code'><figcaption><span>signals.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask_login</span> <span class="kn">import</span> <span class="n">current_user</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">save_changes</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">action</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">state</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">inspect</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>        <span class="n">changes</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">attr</span> <span class="ow">in</span> <span class="n">state</span><span class="o">.</span><span class="n">attrs</span><span class="p">:</span>
</span><span class='line'>            <span class="n">hist</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="n">get_history</span><span class="p">(</span><span class="n">attr</span><span class="o">.</span><span class="n">key</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">hist</span><span class="o">.</span><span class="n">has_changes</span><span class="p">():</span>
</span><span class='line'>                <span class="k">continue</span>
</span><span class='line'>            <span class="n">added</span> <span class="o">=</span> <span class="n">format_changes_value</span><span class="p">(</span><span class="n">hist</span><span class="o">.</span><span class="n">added</span><span class="p">)</span>
</span><span class='line'>            <span class="n">deleted</span> <span class="o">=</span> <span class="n">format_changes_value</span><span class="p">(</span><span class="n">hist</span><span class="o">.</span><span class="n">deleted</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">added</span> <span class="o">!=</span> <span class="n">deleted</span><span class="p">:</span>
</span><span class='line'>                <span class="n">changes</span><span class="p">[</span><span class="n">attr</span><span class="o">.</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s">&#39;added&#39;</span><span class="p">:</span> <span class="n">added</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&#39;deleted&#39;</span><span class="p">:</span> <span class="n">deleted</span><span class="p">,</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">changes</span><span class="p">:</span>
</span><span class='line'>            <span class="n">mongo</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">user_logs</span><span class="o">.</span><span class="n">insert_one</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>                <span class="n">current_user_id</span><span class="o">=</span><span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'>                <span class="n">action</span><span class="o">=</span><span class="n">action</span><span class="p">,</span>
</span><span class='line'>                <span class="n">table_name</span><span class="o">=</span><span class="n">target</span><span class="o">.</span><span class="n">__tablename__</span><span class="p">,</span>
</span><span class='line'>                <span class="n">object_id</span><span class="o">=</span><span class="n">target</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'>                <span class="n">changes</span><span class="o">=</span><span class="n">changes</span><span class="p">,</span>
</span><span class='line'>                <span class="n">created_at</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">(),</span>
</span><span class='line'>            <span class="p">))</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">receive_before_insert</span><span class="p">(</span><span class="n">mapper</span><span class="p">,</span> <span class="n">connection</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span><span class='line'>    <span class="n">save_changes</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#39;create&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">receive_before_update</span><span class="p">(</span><span class="n">mapper</span><span class="p">,</span> <span class="n">connection</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span><span class='line'>    <span class="n">save_changes</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#39;update&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">receive_before_delete</span><span class="p">(</span><span class="n">mapper</span><span class="p">,</span> <span class="n">connection</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span><span class='line'>    <span class="n">save_changes</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&#39;delete&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask for Django developers]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/07/22/flask-for-django-developers/"/>
    <updated>2016-07-22T07:35:02-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/07/22/flask-for-django-developers</id>
    <content type="html"><![CDATA[<ol>
<li>Aplicación básica</li>
<li>Blueprints</li>
<li>URLs</li>
<li>Vistas</li>
<li>Plantillas (Jinja2)</li>
<li>Procesadores de contexto</li>
<li>Modelos (SQLAlchemy, CRUD)</li>
<li>Formularios</li>
<li>Autenticación</li>
<li>Múltiples idiomas</li>
<li>Mensajes (flash)</li>
<li>Cache</li>
</ol>


<iframe src="//slides.com/vero4ka/flask-para-desarrolladorres-de-django/embed?style=light" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<ul>
<li>Slides: <a href="http://slides.com/vero4ka/flask-para-desarrolladorres-de-django/">http://slides.com/vero4ka/flask-para-desarrolladorres-de-django/</a></li>
<li>Examples: <a href="https://github.com/vero4karu/flask-examples">https://github.com/vero4karu/flask-examples</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cómo obtener el nombre del día de la semana en Python]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/05/26/como-obtener-el-nombre-del-dia-de-la-semana-en-python/"/>
    <updated>2016-05-26T09:02:36-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/05/26/como-obtener-el-nombre-del-dia-de-la-semana-en-python</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="kn">import</span> <span class="nn">calendar</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">calendar</span><span class="o">.</span><span class="n">day_name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;Monday&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">calendar</span><span class="o">.</span><span class="n">day_name</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;Tuesday&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">calendar</span><span class="o">.</span><span class="n">day_name</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;Wednesday&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">calendar</span><span class="o">.</span><span class="n">day_name</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;Thursday&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">calendar</span><span class="o">.</span><span class="n">day_name</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;Friday&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">calendar</span><span class="o">.</span><span class="n">day_name</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;Saturday&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">calendar</span><span class="o">.</span><span class="n">day_name</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;Sunday&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si para nosotros la semana empieza el Domindo, podemos escribirlo de la siguiente forma:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">sunday</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">calendar</span><span class="o">.</span><span class="n">day_name</span><span class="p">[</span><span class="n">sunday</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;Sunday&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">tuesday</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">calendar</span><span class="o">.</span><span class="n">day_name</span><span class="p">[</span><span class="n">tuesday</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">%</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;Tuesday&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL to SQLAlquemy conversions]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/05/04/sql-to-sqlalquemy-conversions/"/>
    <updated>2016-05-04T21:15:39-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/05/04/sql-to-sqlalquemy-conversions</id>
    <content type="html"><![CDATA[<p>Some examples on how to convert raw SQL to SQLAlchemy query:</p>

<h3>Select all</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">text</span><span class="p">,</span> <span class="n">func</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">())</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Add labels</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">requiests</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">.</span><span class="n">label</span><span class="p">(</span><span class="s">&#39;requests&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">row</span><span class="o">.</span><span class="n">requests</span>
</span><span class='line'><span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Sum</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="k">as</span> <span class="n">rides</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">label</span><span class="p">(</span><span class="s">&#39;books&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">row</span><span class="o">.</span><span class="n">books</span>
</span><span class='line'><span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Return a count of rows and distinct</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span><span class="p">(</span><span class="n">author_id</span><span class="p">))</span> <span class="k">as</span> <span class="n">authors</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">distinct</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">distinct</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">author_id</span><span class="p">))</span><span class="o">.</span><span class="n">label</span><span class="p">(</span><span class="s">&#39;authors&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Query a date range</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">b</span> <span class="k">WHERE</span> <span class="n">b</span><span class="p">.</span><span class="n">created_at</span> <span class="o">&gt;</span> <span class="k">current_timestamp</span> <span class="o">-</span> <span class="p">(</span><span class="k">current_timestamp</span> <span class="o">-</span> <span class="nb">interval</span> <span class="s1">&#39;5 hours&#39;</span><span class="p">)::</span><span class="n">time</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Book</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">between</span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">5</span><span class="p">),</span> <span class="n">now</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conditional sum</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(((</span><span class="n">status</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">))::</span><span class="nb">int</span><span class="p">))</span> <span class="k">as</span> <span class="n">books</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="kn">from</span> <span class="nn">sqlalchemy.sql.expression</span> <span class="kn">import</span> <span class="n">case</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">case</span><span class="p">([(</span><span class="n">Book</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">in_</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">)),</span> <span class="mi">1</span><span class="p">)],</span> <span class="n">else_</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span><span class="o">.</span><span class="n">label</span><span class="p">(</span><span class="s">&#39;books&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>In</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">Book</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Book</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">in_</span><span class="p">((</span>
</span><span class='line'>        <span class="n">BOOK_CONFIRMED</span><span class="p">,</span>
</span><span class='line'>        <span class="n">BOOK_FINISHED</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)),</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Other examples</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bookings</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">to_char</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span> <span class="s">&#39;MM&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Book</span><span class="o">.</span><span class="n">author_id</span> <span class="o">==</span> <span class="n">author</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">between</span><span class="p">(</span><span class="n">six_months_ago_min</span><span class="p">,</span> <span class="n">today_max</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">group_by</span><span class="p">(</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">to_char</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span> <span class="s">&#39;MM&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">to_char</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span> <span class="s">&#39;MM&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pruebas para formularios en Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/09/30/pruebas-para-formularios-en-django/"/>
    <updated>2015-09-30T04:49:19-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/09/30/pruebas-para-formularios-en-django</id>
    <content type="html"><![CDATA[<p>En esta entrada de blog quiero compartir la forma en la que escribo ruebas para formularios en un proyecto de Django.</p>

<p>Primero vamos a instalar los paquetes necesarios:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install django-webtest
</span><span class='line'>$ pip install factory-boy</span></code></pre></td></tr></table></div></figure>


<p><a href="http://webtest.pythonpaste.org/en/latest/WebTest">WebTest</a> es una biblioteca que nos ayuda a escribir pruebas para las aplicaciones wsgi. Es mucho más poderosa comparando con <code>django.test.Client</code> que viene con Django.</p>

<p>En el archivo de configuración especificamos que vamos a usar la base de datos SQLite para correr nuestras pruebas:</p>

<figure class='code'><figcaption><span>test_settings.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s">&#39;django.db.backends.sqlite3&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suponemos que queremos escribir una prueba unitaria para una vista que crea un objeto del modelo <code>Event</code>:</p>

<figure class='code'><figcaption><span>models.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Event</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>    <span class="n">start_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">end_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">people</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="s">&#39;history.Person&#39;</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;events&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aquí está la vista que maneja el formulario para crear un evento:</p>

<figure class='code'><figcaption><span>views.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">EventCreateView</span><span class="p">(</span><span class="n">LoginRequiredMixin</span><span class="p">,</span> <span class="n">CreateView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">Event</span>
</span><span class='line'>    <span class="n">form_class</span> <span class="o">=</span> <span class="n">EventForm</span>
</span><span class='line'>    <span class="n">success_url</span> <span class="o">=</span> <span class="n">reverse_lazy</span><span class="p">(</span><span class="s">&#39;history:timeline&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora escribimos nuestra prueba. Vamos a extender la clase <code>django_webtest.WebTest</code>, que en su lugar extiende <code>django.test.TestCase</code> de Django, y crear a un usuario:</p>

<figure class='code'><figcaption><span>tests.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django_webtest</span> <span class="kn">import</span> <span class="n">WebTest</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HistoryViewsTests</span><span class="p">(</span><span class="n">WebTest</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">superuser</span> <span class="o">=</span> <span class="n">get_user_model</span><span class="p">()</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create_superuser</span><span class="p">(</span>
</span><span class='line'>            <span class="n">email</span><span class="o">=</span><span class="s">&#39;superuser@example.com&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">username</span><span class="o">=</span><span class="s">&#39;superuser&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">password</span><span class="o">=</span><span class="s">&#39;secret&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">HistoryViewsTests</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">setUp</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_create_event</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># código para nuestra prueba</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora podemos probar que cuando un usuario trata de acceder nuestra página, se redirige al formulario de acceso (el códigos de estado HTTP es 302):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="n">reverse</span><span class="p">(</span><span class="s">&#39;history:event_create&#39;</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">302</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora vamos a acceder la vista como superusuario:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">user</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">superuser</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como tenemos solo un formulario en la página, podemos obtenerlo por una de tres formas: por el atributo <code>.form</code>: <code>response.form</code>, por índice <code>response.forms[0]</code> o por <code>id</code> del formulario (artibuto HTML)<code>response.forms['event_form']</code>.</p>

<p>Para facilitar la depuración de nuestras pruebas, podemos pedir a mostrar el <code>response</code> en navegador predeterminado:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">response</span><span class="o">.</span><span class="n">showbrowser</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora podemos diligenciar nuestro formulario con los datos de prueba:</p>

<figure class='code'><figcaption><span>tests.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">HistoryViewsTests</span><span class="p">(</span><span class="n">WebTest</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_create_event</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">person1</span><span class="p">,</span> <span class="n">person2</span><span class="p">,</span> <span class="n">person3</span> <span class="o">=</span> <span class="n">PersonFactory</span><span class="o">.</span><span class="n">create_batch</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">user</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">superuser</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="n">Event</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">exists</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">forms</span><span class="p">[</span><span class="s">&#39;event_form&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">form</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">u&#39;Título del evento&#39;</span>
</span><span class='line'>        <span class="n">form</span><span class="p">[</span><span class="s">&#39;start_date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>        <span class="n">form</span><span class="p">[</span><span class="s">&#39;people&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">person1</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">person2</span><span class="o">.</span><span class="n">id</span><span class="p">]</span>
</span><span class='line'>        <span class="n">form</span><span class="o">.</span><span class="n">submit</span><span class="p">()</span><span class="o">.</span><span class="n">follow</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">Event</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">count</span><span class="p">(),</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">event</span> <span class="o">=</span> <span class="n">Event</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="s">u&#39;Título del evento&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">people</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">people</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">person1</span><span class="p">,</span> <span class="n">people</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="n">person2</span><span class="p">,</span> <span class="n">people</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertNotIn</span><span class="p">(</span><span class="n">person3</span><span class="p">,</span> <span class="n">people</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para generar objetos del modelo <code>Person</code> usamos la biblioteca <a href="http://factoryboy.readthedocs.org/">Factory Boy</a>:</p>

<figure class='code'><figcaption><span>factories.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">..models</span> <span class="kn">import</span> <span class="n">Person</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">factory</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">factory.fuzzy</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PersonFactory</span><span class="p">(</span><span class="n">factory</span><span class="o">.</span><span class="n">django</span><span class="o">.</span><span class="n">DjangoModelFactory</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">fuzzy</span><span class="o">.</span><span class="n">FuzzyText</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">model</span> <span class="o">=</span> <span class="n">Person</span>
</span></code></pre></td></tr></table></div></figure>


<p>Así podemos acceder los opciones de una selección o selección múltiple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span> <span class="n">form</span><span class="p">[</span><span class="s">&#39;people&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">options</span>
</span><span class='line'><span class="go">[(u&#39;1&#39;, False, u&#39;GLUZLvZfyjdZEmjNtnAJvsIVljodQjZpzLRDKrqJtYGiDLmSrN&#39;), (u&#39;2&#39;, False, u&#39;vOxDBbmLaUXxJkJzcqYgLQpBieSoLtXJcpHCEPUpYUIzybhsAh&#39;), (u&#39;3&#39;, False, u&#39;tfXSXCTIQICDwVPYvxZGSXgclFTnHbeYSQaMntxJNcgUJjzAwX&#39;)]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">form</span><span class="p">[</span><span class="s">&#39;people&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">person1</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">person2</span><span class="o">.</span><span class="n">id</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span> <span class="n">form</span><span class="p">[</span><span class="s">&#39;people&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'><span class="go">[u&#39;1&#39;, u&#39;2&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora corremos nuestras pruebas y voilà:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./manage.py test
</span><span class='line'>Creating test database for alias 'default'...
</span><span class='line'>..
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'>Ran 1 test in 0.463s
</span><span class='line'>
</span><span class='line'>OK
</span><span class='line'>Destroying test database for alias 'default'...</span></code></pre></td></tr></table></div></figure>


<p>Enlaces:</p>

<ul>
<li><a href="https://github.com/django-webtest/django-webtest">WebTest</a></li>
<li><a href="http://webtest.pythonpaste.org/en/latest/forms.html">Manejo de formularios con WebTest</a></li>
<li><a href="http://factoryboy.readthedocs.org/">Factory Boy</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cómo configurar PyCharm para compilar los archivos SASS]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/06/29/como-configurar-pycharm-para-compilar-los-archivos-sass/"/>
    <updated>2015-06-29T03:10:03-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/06/29/como-configurar-pycharm-para-compilar-los-archivos-sass</id>
    <content type="html"><![CDATA[<p>Suponemos que tenemos un proyecto con las siguientes carpetas:</p>

<pre><code>app/
   static/
        css/
        sass/
            main.sass
            home.sass
            variables.sass
</code></pre>

<p>y queremos que cada vez cuando editemos alguno de los archivos <code>.sass</code>, PyCharm lo compile y ponga en la carpeta <code>app/static/css/</code>:</p>

<pre><code>app/
   static/
        css/
            main.css
            home.css
        sass/
            main.sass
            home.sass
            variables.sass
</code></pre>

<p>Para esto debemos ir a <code>File -&gt; Settings -&gt; File Watchers</code> y agregar un nuevo watcher, escogiendo la opción <code>SASS</code></p>

<p><img src="http://blog.vero4ka.info/images/pycharm_file_watchers.png"></p>

<p>y editar las configuraciones:</p>

<p><img src="http://blog.vero4ka.info/images/pycharm_file_watchers_settings.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to raise a form invalid event inside form_valid method of a FormView]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/how-to-raise-a-form-invalid-event-inside-form-valid-method-of-a-formview/"/>
    <updated>2015-03-01T19:35:52-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/how-to-raise-a-form-invalid-event-inside-form-valid-method-of-a-formview</id>
    <content type="html"><![CDATA[<p>How to raise form invalid inside <code>form_valid</code> method of a <code>FormView</code> (<code>CreateView</code>/<code>UpdateView</code>) and add an error message to <code>non_field_errors</code>:</p>

<div><script src='https://gist.github.com/3b62a13bdce7fe4178ac.js'></script>
<noscript><pre><code>from django.forms.util import ErrorList
from django import forms

class ContractUpdateView(UpdateView):
    model = Contract
    template_name = &#39;contract/contract_form.html&#39;
    form_class = ContractForm

    def form_valid(self, form):
        if self.request.POST.get(&#39;finish&#39;):
            if (
                not form.cleaned_data[&#39;number&#39;] or
                not self.object.images.count()
            ):
                form._errors[forms.forms.NON_FIELD_ERRORS] = ErrorList([
                    u&#39;You have to add images and a contract number&#39;
                ])
                return self.form_invalid(form)
            self.object.is_submitted = True
        self.object = form.save()
        return HttpResponseRedirect(self.get_success_url())</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to show a BooleanField of a ModelForm as radio select (yes/no) in Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/how-to-show-a-booleanfield-of-a-modelform-as-radio-select-yes-slash-no-in-django/"/>
    <updated>2015-03-01T19:26:52-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/how-to-show-a-booleanfield-of-a-modelform-as-radio-select-yes-slash-no-in-django</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s suppose that we have a field <code>is_active</code> in our model. It is a boolean field, but in a template we want to show it as a radio select.</p>

<p>In this case we just need to add <code>choices</code> attribute for the model field and then change a widget of the corresponding form:</p>

<div><script src='https://gist.github.com/ff27cad71d8f7f80f735.js'></script>
<noscript><pre><code>class MyForm(forms.ModelForm):
    class Meta:
        model = MyModel
        widgets = {
            &#39;is_active&#39;: forms.RadioSelect
        }</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to send request to AJAX view in Django tests]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/how-to-send-request-to-ajax-view-in-django-tests/"/>
    <updated>2015-03-01T19:23:37-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/how-to-send-request-to-ajax-view-in-django-tests</id>
    <content type="html"><![CDATA[<p>If you have a view that requires an AJAX request, in other words, checks if <code>request.is_ajax()</code>, here is a way you can write a unit test for this view:</p>

<div><script src='https://gist.github.com/dca59e325c9f7554d176.js'></script>
<noscript><pre><code>import json
from django.test import TestCase

class JSONViewTestCase(TestCase):

    def test_json_view(self):
        response = self.client.post(
            reverse(&#39;my_json_view&#39;),
            json.dumps({
                # your JSON
            }),
            &#39;json&#39;,
            HTTP_X_REQUESTED_WITH=&#39;XMLHttpRequest&#39;,
        )
        json_string = response.content
        response_data = json.loads(json_string)
        # do smth.</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[¿Cómo concatenar querysets del mismo modelo en Django?]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/como-concatenar-querysets-del-mismo-modelo-en-django/"/>
    <updated>2015-03-01T19:21:21-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/como-concatenar-querysets-del-mismo-modelo-en-django</id>
    <content type="html"><![CDATA[<p>Modo #1:</p>

<p>Podemos usar <code>itertools.chain</code> para  unir dos o más querysets:</p>

<pre><code>from itertools import chain
for item in chain(qs1, qs2, qs3):
    # ...
</code></pre>

<p>Modo #2:</p>

<p>Podemos usar el operador lógico <code>OR</code>:</p>

<pre><code>res = qs1 | qs2 | qs3
res = res.distinct()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get an array of checked checkboxes values using jQuery]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/get-an-array-of-checked-checkboxes-values-using-jquery/"/>
    <updated>2015-03-01T19:17:42-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/get-an-array-of-checked-checkboxes-values-using-jquery</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/9772283.js'></script>
<noscript><pre><code>&lt;input type=&quot;checkbox&quot; value=&quot;UN&quot; name=&quot;airlines&quot; checked&gt;       
&lt;input type=&quot;checkbox&quot; value=&quot;IB&quot; name=&quot;airlines&quot;&gt;      
&lt;input type=&quot;checkbox&quot; value=&quot;SU&quot; name=&quot;airlines&quot; checked&gt;</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algunos paquetes útiles para Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/algunos-paquetes-utiles-para-django/"/>
    <updated>2015-03-01T19:16:24-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/algunos-paquetes-utiles-para-django</id>
    <content type="html"><![CDATA[<h4><a href="https://github.com/omab/python-social-auth">python-social-auth</a></h4>

<p>Autentificación de usuarios con los redes sociales en Django.</p>

<h4><a href="https://github.com/praekelt/django-recaptcha">django-recaptcha</a></h4>

<p>Integración de reCAPTCHA en los formularios de Django.</p>

<h4><a href="https://github.com/alex/django-taggit">django-taggit</a></h4>

<p>Campo para los modelos de Django para crear etiquetas.</p>

<h4><a href="https://github.com/sehmaschine/django-grappelli">django-grappelli</a></h4>

<p>Interface para el Administrador de Django.</p>

<h4><a href="https://github.com/jezdez/django-constance">django-constance</a></h4>

<p>Para cambiar algunas variables de configuración desde el Administrador de Django.</p>

<h4><a href="https://github.com/praekelt/django-recaptcha">django-recaptcha</a></h4>

<p>Usar <a href="https://www.google.com/recaptcha/">reCAPTCHA</a> de Google en los formularios de Django.</p>

<h4><a href="https://github.com/trentm/django-markdown-deux">django-markdown-deux</a></h4>

<p>Templatetags y filtros que permiten usar Markdown en las plantillas de Django.</p>

<h4><a href="https://github.com/django-debug-toolbar/django-debug-toolbar">django-debug-toolbar</a></h4>

<p>La herramienta que ayuda con la depuración del código en Django.
Instrucciones para instalar el módulo: <a href="http://www.ruben-arranz.es/blog/instalar-django-debug-toolbar/">http://www.ruben-arranz.es/blog/instalar-django-debug-toolbar/</a></p>

<h4><a href="https://github.com/paulocheque/django-dynamic-fixture">django-dynamic-fixture</a></h4>

<p>Ayuda crear objetos de modelos de Django de la forma dinámica. Es muy útil para los test cuando hay necesidad de crear muchos objetos.</p>

<h4><a href="https://github.com/brack3t/django-braces">django-braces</a></h4>

<p>La biblioteca de los mixins útiles para Django.</p>

<h4><a href="https://github.com/revsys/django-friendship">django-friendship</a></h4>

<p>Biblioteca que ayuda a manejar las peticiones de amistad para los usuarios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django templates: render an array in two columns using Bootstrap grid]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/django-templates-render-an-array-in-two-columns-using-bootstrap-grid/"/>
    <updated>2015-03-01T19:03:05-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/django-templates-render-an-array-in-two-columns-using-bootstrap-grid</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/efd0fdb46ef34971bac2.js'></script>
<noscript><pre><code>&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        1
    &lt;/div&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        2
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        3
    &lt;/div&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        4
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        5
    &lt;/div&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        6
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        7
    &lt;/div&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        8
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;info-block col-xs-12 col-sm-6&quot;&gt;
        9
    &lt;/div&gt;
&lt;/div&gt;</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to validate a Django form with inline formsets]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/how-to-validate-a-django-form-with-inline-formsets/"/>
    <updated>2015-03-01T18:57:47-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/how-to-validate-a-django-form-with-inline-formsets</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/1c065cb54baef2da79c2.js'></script>
<noscript><pre><code>from django.contrib import admin

from product.forms import EquipmentForm

@admin.register(Equipment)
class EquipmentAdmin(admin.ModelAdmin):
    form = EquipmentForm
    
    inlines = [
        EquipmentGalleryInline,
    ]</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate .zip file in Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/generate-zip-file-in-django/"/>
    <updated>2015-03-01T18:47:58-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/generate-zip-file-in-django</id>
    <content type="html"><![CDATA[<p>A view that creates a .ZIP file of multiple files and returns it in response:</p>

<div><script src='https://gist.github.com/3b1768a1cb13f7e457d4.js'></script>
<noscript><pre><code>import os
import zipfile
import cStringIO as StringIO

class ContractDownloadGalleryDetailView(LoginRequiredMixin, DetailView):
    model = Contract

    def render_to_response(self, context, **httpresponse_kwargs):
        contract = self.object

        if not contract.images.exists():
            return HttpResponseRedirect(
                reverse(&#39;contract:contract_detail&#39;, args=(contract.id,)),
            )

        dirname = u&#39;imagenes_contrato_{0}&#39;.format(contract.number)
        filename = u&#39;{0}.zip&#39;.format(dirname)

        buffer = StringIO.StringIO()
        z = zipfile.ZipFile(buffer, &#39;w&#39;)
        for contract_image in contract.images.all():
            z.write(contract_image.image.path, os.path.join(dirname, os.path.basename(contract_image.image.path)))
        z.close()
        buffer.seek(0)
        response = HttpResponse(buffer.read())
        response[&#39;Content-Disposition&#39;] = u&#39;attachment; filename={0}&#39;.format(filename)
        response[&#39;Content-Type&#39;] = &#39;application/x-zip&#39;
        return response</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django: python-social-auth configuration and pipeline to get users information]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/django-python-social-auth-configuration-and-pipeline-to-get-users-information/"/>
    <updated>2015-03-01T18:45:21-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/django-python-social-auth-configuration-and-pipeline-to-get-users-information</id>
    <content type="html"><![CDATA[<p><code>python-social-auth</code> configuration and pipeline to get users email, full name and save avatar for Facebook, Twitter, LinkedIn and Google in Django.</p>

<div><script src='https://gist.github.com/9899590.js'></script>
<noscript><pre><code>def update_user_social_data(strategy, *args, **kwargs):
    &quot;&quot;&quot;Set the name and avatar for a user only if is new.
    &quot;&quot;&quot;
    print &#39;update_user_social_data ::&#39;, strategy
    if not kwargs[&#39;is_new&#39;]:
        return

    full_name = &#39;&#39;
    backend = kwargs[&#39;backend&#39;]

    user = kwargs[&#39;user&#39;]

    if (
        isinstance(backend, GoogleOAuth2)
        or isinstance(backend, FacebookOAuth2)
    ):
        full_name = kwargs[&#39;response&#39;].get(&#39;name&#39;)
    elif (
        isinstance(backend, LinkedinOAuth)
        or isinstance(backend, TwitterOAuth)
    ):
        if kwargs.get(&#39;details&#39;):
            full_name = kwargs[&#39;details&#39;].get(&#39;fullname&#39;)

    user.full_name = full_name

    if isinstance(backend, GoogleOAuth2):
        if response.get(&#39;image&#39;) and response[&#39;image&#39;].get(&#39;url&#39;):
            url = response[&#39;image&#39;].get(&#39;url&#39;)
            ext = url.split(&#39;.&#39;)[-1]
            user.avatar.save(
               &#39;{0}.{1}&#39;.format(&#39;avatar&#39;, ext),
               ContentFile(urllib2.urlopen(url).read()),
               save=False
            )
    elif isinstance(backend, FacebookOAuth2):
        fbuid = kwargs[&#39;response&#39;][&#39;id&#39;]
        image_name = &#39;fb_avatar_%s.jpg&#39; % fbuid
        image_url = &#39;http://graph.facebook.com/%s/picture?type=large&#39; % fbuid
        image_stream = urlopen(image_url)

        user.avatar.save(
            image_name,
            ContentFile(image_stream.read()),
        )
    elif isinstance(backend, TwitterOAuth):
        if kwargs[&#39;response&#39;].get(&#39;profile_image_url&#39;):
            image_name = &#39;tw_avatar_%s.jpg&#39; % full_name
            image_url = kwargs[&#39;response&#39;].get[&#39;profile_image_url&#39;]
            image_stream = urlopen(image_url)

            user.avatar.save(
                image_name,
                ContentFile(image_stream.read()),
            )
    elif isinstance(backend, LinkedinOAuth):
        if kwargs[&#39;response&#39;].get(&#39;pictureUrl&#39;):
            image_name = &#39;linked_avatar_%s.jpg&#39; % full_name
            image_url = kwargs[&#39;response&#39;].get[&#39;pictureUrl&#39;]
            image_stream = urlopen(image_url)

            user.avatar.save(
                image_name,
                ContentFile(image_stream.read()),
            )
    user.save()</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Chorme extentions]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/03/01/useful-chorme-extentions/"/>
    <updated>2015-03-01T18:41:53-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/03/01/useful-chorme-extentions</id>
    <content type="html"><![CDATA[<h4>JSONView</h4>

<p>Validate and view JSON documents.
<a href="https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc">https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc</a></p>

<h4>Postman - REST Client</h4>

<p><a href="https://chrome.google.com/webstore/detail/fdmmgilgnpjigdojojpjoooidkmcomcm">https://chrome.google.com/webstore/detail/fdmmgilgnpjigdojojpjoooidkmcomcm</a></p>

<h4>Evernote Web Clipper</h4>

<p>Use the Evernote extension to save things you see on the web into your Evernote account.
<a href="https://chrome.google.com/webstore/detail/pioclpoplcdbaefihamjohnefbikjilc">https://chrome.google.com/webstore/detail/pioclpoplcdbaefihamjohnefbikjilc</a></p>

<h4>GistBox Clipper</h4>

<p>Save code snippets from anywhere on the web. Companion extension to GistBoxApp.com.
<a href="https://chrome.google.com/webstore/detail/cejmhmbmafamjegaebkjhnckhepgmido">https://chrome.google.com/webstore/detail/cejmhmbmafamjegaebkjhnckhepgmido</a></p>

<h4>XV — XML Viewer</h4>

<p>Powerful XML viewer for Google Chrome
<a href="https://chrome.google.com/webstore/detail/eeocglpgjdpaefaedpblffpeebgmgddk">https://chrome.google.com/webstore/detail/eeocglpgjdpaefaedpblffpeebgmgddk</a></p>

<h4>LiveReload</h4>

<p><a href="https://chrome.google.com/webstore/detail/jnihajbhpnppcggbcgedagnkighmdlei">https://chrome.google.com/webstore/detail/jnihajbhpnppcggbcgedagnkighmdlei</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MEL Script (Autodesk Maya): Go through hierarchy]]></title>
    <link href="http://blog.vero4ka.info/blog/2015/02/21/mel-script-autodesk-maya-go-through-hierarchy/"/>
    <updated>2015-02-21T21:43:47-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2015/02/21/mel-script-autodesk-maya-go-through-hierarchy</id>
    <content type="html"><![CDATA[<p>Add a prefix <code>myPrefix_</code> to all child elements of the joint <code>joint1</code>:</p>

<div><script src='https://gist.github.com/11099336.js'></script>
<noscript><pre><code>string $stat_element = &quot;joint1&quot;;
select -r $stat_element;
string $nodes[] = `ls -sl -dag`;
for($node in $nodes){
    rename -ignoreShape $node (&quot;myPrefix_&quot; + $node);
}</code></pre></noscript></div>



]]></content>
  </entry>
  
</feed>
