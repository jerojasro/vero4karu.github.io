<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django | Cansada de ser feliz]]></title>
  <link href="http://blog.vero4ka.info/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://blog.vero4ka.info/"/>
  <updated>2017-05-15T21:15:00-05:00</updated>
  <id>http://blog.vero4ka.info/</id>
  <author>
    <name><![CDATA[vero4ka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Login con Facebook en Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2017/03/20/login-con-facebook-en-django/"/>
    <updated>2017-03-20T15:24:49-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2017/03/20/login-con-facebook-en-django</id>
    <content type="html"><![CDATA[<p>Este ejemplo fue probado con la versión 1.10 de Django.</p>

<p>Primero instalamos las siguentes dos librerías que hacen parte del proyecto <a href="https://github.com/python-social-auth">Python Social Auth</a>:</p>

<pre><code class="bash">$ pip install social-auth-core
$ pip install social-auth-app-django
</code></pre>

<!-- more -->


<p>Agregamos la aplicación <code>social_django</code> a la lista <code>INSTALLED_APPS</code> del archivo <code>settings.py</code> en nuestro proyecto de Django:</p>

<pre><code class="python">INSTALLED_APPS = [
    'social_django',
]
</code></pre>

<p>Especificamos en <code>AUTHENTICATION_BACKENDS</code> que vamos a usar un backend adicional para ingresar con la cuenta de Facebook:</p>

<pre><code class="python">AUTHENTICATION_BACKENDS = [
    'social_core.backends.facebook.FacebookOAuth2',

    'django.contrib.auth.backends.ModelBackend',
]
</code></pre>

<p>y finalmente agregamos los procesadores de contexto:</p>

<pre><code class="python">TEMPLATES = [
    {
        ...
        'OPTIONS': {
            ...
            'context_processors': [
                ...
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                ...
            ]
        }
    }
]
</code></pre>

<p>Ahora podemos correr las migraciónes para crear las tablas que usa <code>social_django</code> para guargar las cuentas y relaciones con los usuarios de Django que ya tenemos:</p>

<pre><code class="bash">$ ./manage.py migrate
Running migrations:
  Applying social_django.0001_initial... OK
  Applying social_django.0002_add_related_name... OK
  Applying social_django.0003_alter_email_max_length... OK
  Applying social_django.0004_auto_20160423_0400... OK
  Applying social_django.0005_auto_20160727_2333... OK
  Applying social_django.0006_partial... OK
</code></pre>

<p>Agregamos las urls de <code>social_django</code> en <code>urls.py</code>:</p>

<pre><code class="python">url('', include('social_django.urls', namespace='social')),
</code></pre>

<p>Listo, con esto podemos agregar un enlace en alguna de nuestras plantillas:</p>

<p><figure class='code'><figcaption><span>templates/base.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;social:begin&#39; &#39;facebook&#39; %}?next={{ request.path }}&quot;</span><span class="nt">&gt;</span>Login con Facebook<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Especificamos que queremos asociar usuarios que ingresan con Facebook a nuestros usuario de Django por medio de correo electrónico:</p>

<pre><code class="python">SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',  # &lt;--- este
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)
</code></pre>

<p>Es decir: cuando un usuario va a ingresar a nuestra página con su cuenta de Facebook, la aplicación va a mirar si en la tabla de usuario ya existe uno con el mismo correo, y si es así, simplemente lo asocia al la cuenta de Facebook con la que el usuario ingresó. En el caso opuesto, se crea un nuevo registro en la tabla <code>users</code>.</p>

<p>Ahora tenemos que crear la aplicación de Facebook desde la página <a href="https://developers.facebook.com">developers.facebook.com</a>. Luego agregamos el servicio de &ldquo;Facebook Login&rdquo;:</p>

<p><img class="center" src="/images/django/fb-app-login.png"></p>

<p>Copiamos las llaves de la aplicación</p>

<p><img class="center" src="/images/django/fb-app-key.png"></p>

<p>y los pegamos en el archivo de configuración de Django:</p>

<p><figure class='code'><figcaption><span>settings.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">SOCIAL_AUTH_FACEBOOK_KEY</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">app</span><span class="o">-</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">SOCIAL_AUTH_FACEBOOK_SECRET</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">app</span><span class="o">-</span><span class="n">secret</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Después de hacer los pasos anteriores, al momento de hacer click en &ldquo;Login con Facebook&rdquo;, la aplicación nos va a redirigir a la siguiente página:</p>

<p><img class="center" src="/images/django/fb-login-1.png"></p>

<p>Pero nosotros, al momento de login queremos obtener correo electrónico de nuestro usuario, por eso definimos el scope:</p>

<p><figure class='code'><figcaption><span>settings.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">SOCIAL_AUTH_FACEBOOK_IGNORE_DEFAULT_SCOPE</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="n">SOCIAL_AUTH_FACEBOOK_SCOPE</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">email</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Y ahora sí, la aplicación pide acceso al correo electrónico:</p>

<p><img class="center" src="/images/django/fb-login-2.png"></p>

<p>Entramos en el administrador de Django y podemos ver que se creó un registro asociando al usuario que ya existía en la base de datos a su cuenta de Facebook:</p>

<p><img class="center" src="/images/django/fb-app-django-admin.png"></p>

<p>Enlaces:</p>

<ul>
<li><a href="https://developers.facebook.com/docs/facebook-login">Documentación de FB</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cómo desplegar un proyecto de Django con uWSGI + nginx + supervisor]]></title>
    <link href="http://blog.vero4ka.info/blog/2017/01/16/como-desplegar-un-proyecto-de-django-con-uwsgi-plus-nginx-plus-supervisor/"/>
    <updated>2017-01-16T17:39:09-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2017/01/16/como-desplegar-un-proyecto-de-django-con-uwsgi-plus-nginx-plus-supervisor</id>
    <content type="html"><![CDATA[<p>Suponemos que tenemos <a href="https://github.com/vero4karu/sitp_scraper">un proyecto</a> de Django y queremos desplegarlo en un servidor con un sistema operativo Linux.</p>

<p>La idea es que nuestro servidor web va a usar una interfaz (WSGI) para &ldquo;hablar&rdquo; con nuestra aplicación de Django. Esa interfaz va a correr la aplicación, pasarle las peticiones de usuario y devolver la respuesta. WSGI (Web Server Gateway Interface) es un estándar y uWSGI es una de sus implementaciones que vamos a usar:</p>

<pre><code>Usuario &lt;-&gt; Servidow web &lt;-&gt; Socket &lt;-&gt; uWSGI &lt;-&gt; Django
</code></pre>

<!-- more -->


<p>Decimos que el código del proyecto está en la carpeta <code>/home/deploy/sitp_scraper</code>. Primero creamos el entorno virtual e instalamos las librerías de Python proyecto (en éste ejemplo usamos <a href="https://virtualenvwrapper.readthedocs.io/en/latest/">virtualenvwrapper</a>):</p>

<pre><code>mkvirtualenv stip_scraper
pip install -r requitements.txt
</code></pre>

<p>Instalamos uWSGI:</p>

<pre><code>pip install uwsgi
</code></pre>

<p>Verificamos si podemos correr nuestro proyecto si problema:</p>

<pre><code>./manage.py runserver 0.0.0.0:8000
</code></pre>

<p>Ahora probamos correrlo usando uWSGI:</p>

<pre><code>uwsgi --http :8000 --module stip_scraper.wsgi
</code></pre>

<p>Instalamos <a href="https://nginx.org/en/">nginx</a>:</p>

<pre><code>sudo apt-get install nginx
sudo /etc/init.d/nginx start 
</code></pre>

<p>Si al visitar <code>nuestroservidor.com:80</code> vemos el mensaje &ldquo;Welcome to nginx&rdquo;, podemos concluir que nginx funciona de la forma correcta.</p>

<p>Configuramos nginx <code>sitp_scraper_nginx.conf</code>:</p>

<pre><code class="nginx">upstream django {
    server unix:///tmp/sitp_scraper.sock;
}

server {
    listen 80;
    listen [::]:80;
    server_name  nuestroservidor.com;  # Nuestro dominio o dirección IP
    charset      utf-8;

    client_max_body_size 10M;  # Tamaño máximo de archivos que podrémos subir al servidor

    location /media  {
        # MEDIA_ROOT de nuestro proyecto de Django
        alias /home/deploy/sitp_scraper/media;
    }

    location /static {
        # STATIC_ROOT de nuestro proyecto de Django
        alias /home/deploy/sitp_scraper/static;

    }

    location / {
        uwsgi_pass  django;
        include     /home/deploy/sitp_scraper/uwsgi_params;
    }
}
</code></pre>

<p>El archivo <code>uwsgi_params</code> se puede descargar aquí: <a href="https://github.com/nginx/nginx/blob/master/conf/uwsgi_params">github.com/nginx/nginx/blob/master/conf/uwsgi_params</a></p>

<p>Creamos en la carpeta <code>/etc/nginx/sites-enabled</code> un enlace hacía nuestra configuración para que nginx pueda verla:</p>

<pre><code>sudo ln -s ~/path/to/your/sitp_scraper_nginx.conf /etc/nginx/sites-enabled/
</code></pre>

<p>Verificamos si nuestra configuración está bien:</p>

<pre><code>nginx -t
</code></pre>

<p>y reiniciamos nginx:</p>

<pre><code>sudo /etc/init.d/nginx restart
</code></pre>

<p>Ahora creamos un archivo <code>sitp_scraper_uwsgi.ini</code> para guardar las opciones que vamos a pasar a uWSGI:</p>

<pre><code>[uwsgi]
# Django-related settings
chdir           = /home/deploy/sitp_scraper
module          = sitp_scraper.wsgi
home            = /home/deploy/.virtualenvs/sitp_scraper

# Process-related settings
master          = true
processes       = 10

# The socket (use the full path to be safe)
socket          = /tmp/sitp_scraper.sock
chmod-socket    = 664
uid             = www-data
gid             = www-data

# Clear environment on exit
vacuum          = true
</code></pre>

<p>Agregamos nuestro usuario de Linux al grupo <code>www-data</code> (para no tener problemas con permisos) y verificamos que todo funcione bien:</p>

<pre><code>uwsgi --ini sitp_scraper_uwsgi.ini
</code></pre>

<p>Podemos ver que se creó un archvo <code>/tmp/sitp_scraper.sock</code>:</p>

<pre><code>ll /tmp/sitp_scraper.sock
srw-rw-r-- 1 www-data www-data 0 Jan 15 20:46 /tmp/sitp_scraper.sock
</code></pre>

<p>Ahora instalamos supervisor:</p>

<pre><code>apt-get install supervisor
service supervisor start
</code></pre>

<p>y creamos un archivo de configuración <code>/etc/supervisor/conf.d/sitp_scraper.conf</code></p>

<pre><code>[program:uwsgi]
user            = www-data
command = /home/deploy/.virtualenvs/sitp_scraper/bin/uwsgi --ini=/home/deploy/sitp_scraper/sitp_scraper_uwsgi.ini
autostart       = true
autorestart     = true
stderr_logfile  = /tmp/uwsgi_err.log
stdout_logfile  = /tmp/uwsgi.log
stopsignal=INT
</code></pre>

<p>Reiniciamos supervisor:</p>

<pre><code>$ supervisorctl  
uwsgi                            RUNNING   pid 2762, uptime 1 day, 2:39:40
supervisor&gt; restart uwsgi
</code></pre>

<p>Voilà: <code>nuestroservidor.com:80</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cómo pasar variable desde una vista a formulario en Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/10/21/como-pasar-variable-desde-una-vista-a-formulario-en-django/"/>
    <updated>2016-10-21T14:07:56-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/10/21/como-pasar-variable-desde-una-vista-a-formulario-en-django</id>
    <content type="html"><![CDATA[<pre><code class="python views.py">class MyCreateView(CreateView):
    model = MyModel
    template_name = 'myapp/my_form.html'
    form_class = MyForm

    def get_form_kwargs(self):
        kwargs = super(MyCreateView, self).get_form_kwargs()

        # La variable que queremos pasar al formulario
        kwargs.update({'current_user': self.request.user})

        return kwargs
</code></pre>

<pre><code class="python forms.py">class MyForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        # Recibir la variable y borrarla del listado de argumentos.
        current_user = kwargs.pop('current_user')

        super(MyForm, self).__init__(*args, **kwargs)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Múltiples bases de datos en Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/08/31/multiples-bases-de-datos-en-django/"/>
    <updated>2016-08-31T11:15:01-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/08/31/multiples-bases-de-datos-en-django</id>
    <content type="html"><![CDATA[<p>Tenemos dos tablas con esquemas iguales dos en bases de datos diferentes: <code>production</code> y <code>history</code>.</p>

<pre><code class="python settings.py">DATABASE_ROUTERS = ['routers.HistoricRouter']

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': 'localhost',
        'NAME': 'production',
        'USER': 'secret',
        'PASSWORD': 'secret',
    },
    'historical': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': 'localhost',
        'NAME': 'history',
        'USER': 'secret',
        'PASSWORD': 'secret',
    }
}
</code></pre>

<p>Escribimos un router para definir a qué base de datos hacer la petición:</p>

<pre><code class="python routers.py">class HistoricRouter(object):
    """
    A router to control all database operations on models in the historic application.
    """
    def db_for_read(self, model, **hints):
        """
        Attempts to read historic models go to historical.
        """
        if model._meta.app_label == 'historic':
            return 'historical'
        return None

    def db_for_write(self, model, **hints):
        """
        Attempts to write historic models go to historical.
        """
        if model._meta.app_label == 'historic':
            return 'historical'
        return None

    def allow_relation(self, obj1, obj2, **hints):
        """
        Allow relations if a model in the historic app is involved.
        """
        if obj1._meta.app_label == 'historic' or \
            obj2._meta.app_label == 'historic':
            return True
        return None

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        """
        Make sure the historic app only appears in the 'historical' database.
        """
        if app_label == 'historic':
            return db == 'historical'
        return None
</code></pre>

<p>En nuestros modelos especificamos <code>app_label</code> para referirnos a la base de datos distinta a <code>default</code>:</p>

<pre><code class="python models.py">class Author(models.Model):

    class Meta:
        db_table = 'authors'

class AbstractBook(models.Model):
    author = models.ForeignKey('books.Author', related_name='books')
    created_at = models.DateTimeField()

    class Meta:
        unmanaged = True
        abstract = True

class Book(Book):

    class Meta:
        db_table = 'books'

class HistoricBook(Book):

    class Meta:
        unmanaged = True
        db_table = 'books'
        app_label = 'historic'
</code></pre>

<p>La petición <code>Book.objects.all()</code> va a traer libros de la base de datos <code>production</code> y <code>HistoricBook.objects.all()</code> - de la base de datos <code>history</code>.</p>

<p>Modificando <code>allow_relation</code> en nuestro router, podemos permitir llaves foráneas entre modelos de diferentes bases de datos:</p>

<pre><code class="python">    def allow_relation(self, obj1, obj2, **hints):
        return True
</code></pre>

<p>Enlaces:</p>

<ul>
<li><a href="https://docs.djangoproject.com/en/1.10/topics/db/multi-db/#cross-database-relations">Django: Cross-database relations</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask for Django developers]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/07/22/flask-for-django-developers/"/>
    <updated>2016-07-22T07:35:02-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/07/22/flask-for-django-developers</id>
    <content type="html"><![CDATA[<ol>
<li>Aplicación básica</li>
<li>Blueprints</li>
<li>URLs</li>
<li>Vistas</li>
<li>Plantillas (Jinja2)</li>
<li>Procesadores de contexto</li>
<li>Modelos (SQLAlchemy, CRUD)</li>
<li>Formularios</li>
<li>Autenticación</li>
<li>Múltiples idiomas</li>
<li>Mensajes (flash)</li>
<li>Cache</li>
</ol>


<iframe src="//slides.com/vero4ka/flask-para-desarrolladorres-de-django/embed?style=light" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<ul>
<li>Slides: <a href="http://slides.com/vero4ka/flask-para-desarrolladorres-de-django/">http://slides.com/vero4ka/flask-para-desarrolladorres-de-django/</a></li>
<li>Examples: <a href="https://github.com/vero4karu/flask-examples">https://github.com/vero4karu/flask-examples</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
