<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: oauth | Cansada de ser feliz]]></title>
  <link href="http://blog.vero4ka.info/blog/categories/oauth/atom.xml" rel="self"/>
  <link href="http://blog.vero4ka.info/"/>
  <updated>2017-03-20T17:35:43-05:00</updated>
  <id>http://blog.vero4ka.info/</id>
  <author>
    <name><![CDATA[vero4ka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Login con Facebook en Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2017/03/20/login-con-facebook-en-django/"/>
    <updated>2017-03-20T15:24:49-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2017/03/20/login-con-facebook-en-django</id>
    <content type="html"><![CDATA[<p>Este ejemplo fue probado con la versión de Django 1.10.</p>

<p>Primero instalamos las siguentes dos librerías que hacen parte del proyecto <a href="https://github.com/python-social-auth">Python Social Auth</a>:</p>

<pre><code class="bash">$ pip install social-auth-core
$ pip install social-auth-app-django
</code></pre>

<!-- more -->


<p>Agregamos la aplicación <code>social_django</code> en la lista <code>INSTALLED_APPS</code> del archivo <code>settings.py</code> en nuestro proyecto de Django:</p>

<pre><code class="python">INSTALLED_APPS = [
    'social_django',
]
</code></pre>

<p>Especificamos `AUTHENTICATION_BACKENDS``que vamos a usar un backend adicional para ingresar con la cuenta de Facebook:</p>

<pre><code class="python">AUTHENTICATION_BACKENDS = [
    'social_core.backends.facebook.FacebookOAuth2',

    'django.contrib.auth.backends.ModelBackend',
]
</code></pre>

<p>y al fin agregamos los procesadores de contexto:</p>

<pre><code class="python">TEMPLATES = [
    {
        ...
        'OPTIONS': {
            ...
            'context_processors': [
                ...
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                ...
            ]
        }
    }
]
</code></pre>

<p>Ahora podemos correr las migraciónes para crear las tablas que usa <code>social_django</code> para guargar las cuentas y relaciones con los usuarios de Django que ya tenemos:</p>

<pre><code class="bash">$ ./manage.py migrate
Running migrations:
  Applying social_django.0001_initial... OK
  Applying social_django.0002_add_related_name... OK
  Applying social_django.0003_alter_email_max_length... OK
  Applying social_django.0004_auto_20160423_0400... OK
  Applying social_django.0005_auto_20160727_2333... OK
  Applying social_django.0006_partial... OK
</code></pre>

<p>Agregamos urls de <code>social_django</code> en <code>urls.py</code>:</p>

<pre><code class="python">url('', include('social_django.urls', namespace='social')),
</code></pre>

<p>Listo, con esto podemos agregar un enlace en alguna de nuestras plantillas:</p>

<p>{% codeblock templates/base.html lang:html %}
{% raw %}
<a href="{% url 'social:begin' 'facebook' %}?next={{ request.path }}">Login con Facebook</a>
{% endraw %}
{% endcodeblock %}</p>

<p>Especificamos que queremos asocial usuarios que ingresan con Facebook a nuestros usuario de Django por medio de correo electrónico:</p>

<pre><code class="python">SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',  # &lt;--- este
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)
</code></pre>

<p>Es decir: cuando un usuario va a ingresar a nuestra página con su cuenta de Facebook, la aplicación va a mirar si en la tabla de usuario ya existe uno con el mismo correo, y si es así, simplemente lo asocia al la cuenta de Facebook con la que el usuario ingresó. En el caso opuesto, se crea un nuevo registro en la tabla <code>users</code>.</p>

<p>Ahora tenemos que crear la aplicación de Facebook desde la página <a href="https://developers.facebook.com">developers.facebook.com</a>. Luego agregamos el servicio de &ldquo;Facebook Login&rdquo;:</p>

<p>{% img center /images/django/fb-app-login.png %}</p>

<p>Copiamos las llaves de la aplicación</p>

<p>{% img center /images/django/fb-app-key.png %}</p>

<p>y los pegamos en el archivo de configuración de Django:</p>

<p>{% codeblock settings.py lang:python %}
SOCIAL_AUTH_FACEBOOK_KEY = &lsquo;app-id&rsquo;
SOCIAL_AUTH_FACEBOOK_SECRET = &lsquo;app-secret&rsquo;
{% endcodeblock %}</p>

<p>Después de hacer los pasos anteriores, al momento de hacer click en &ldquo;Login con Facebook&rdquo;, la aplicación nos va a redirigir a la siguiente página:</p>

<p>{% img center /images/django/fb-login-1.png %}</p>

<p>Pero nosotros, al momento de login queremos obtener correo electrónico de nuestro usuario, por eso definimos el scope:</p>

<p>{% codeblock settings.py lang:python %}
SOCIAL_AUTH_FACEBOOK_IGNORE_DEFAULT_SCOPE = True
SOCIAL_AUTH_FACEBOOK_SCOPE = [
    &lsquo;email&rsquo;
]
{% endcodeblock %}</p>

<p>Y ahora sí, la aplicación pide acceso al correo electrónico:</p>

<p>{% img center /images/django/fb-login-2.png %}</p>

<p>Entramos en el administrador de Django y podemos ver que se creó un registro asociando al usuario que ya existía en la base de tados a su cuenta de Facebook:</p>

<p>{% img center /images/django/fb-app-django-admin.png %}</p>

<p>Enlaces:</p>

<ul>
<li><a href="https://developers.facebook.com/docs/facebook-login">Documentación de FB</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
