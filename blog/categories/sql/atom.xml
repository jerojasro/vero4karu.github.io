<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sql | Cansada de ser feliz]]></title>
  <link href="http://blog.vero4ka.info/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://blog.vero4ka.info/"/>
  <updated>2017-02-14T22:49:36-05:00</updated>
  <id>http://blog.vero4ka.info/</id>
  <author>
    <name><![CDATA[vero4ka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL to SQLAlchemy conversions]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/05/04/sql-to-sqlalchemy-conversions/"/>
    <updated>2016-05-04T21:15:39-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/05/04/sql-to-sqlalchemy-conversions</id>
    <content type="html"><![CDATA[<p>Some examples on how to convert raw SQL to SQLAlchemy query:</p>

<h3>Select all</h3>

<pre><code class="sql">SELECT COUNT(*)
</code></pre>

<pre><code class="python">&gt; from sqlalchemy import text, func
&gt; db.session.query(func.count()).all()
</code></pre>

<h3>Add labels</h3>

<pre><code class="sql">SELECT COUNT(*) as requiests
</code></pre>

<pre><code class="python">&gt; rows = db.session.query(func.count().label('requests')).all()
&gt; row = rows[0]
&gt; row.requests
12
</code></pre>

<h3>Sum</h3>

<pre><code class="sql">SELECT SUM(status) as rides
</code></pre>

<pre><code class="python">&gt; rows = db.session.query(func.sum(Book.status).label('books')).all()
&gt; row = rows[0]
&gt; row.books
12
</code></pre>

<h3>Return a count of rows and distinct</h3>

<pre><code class="sql">SELECT COUNT(DISTINCT(author_id)) as authors
</code></pre>

<pre><code class="python">from sqlalchemy import distinct
&gt; rows = db.session.query(
    func.count(distinct(Book.author_id)).label('authors')
).all()
</code></pre>

<h3>Query a date range</h3>

<pre><code class="sql">SELECT * FROM b WHERE b.created_at &gt; current_timestamp - (current_timestamp - interval '5 hours')::time
</code></pre>

<pre><code class="python">&gt; now = datetime.datetime.utcnow()
&gt; db.session.query(Book).filter(
    Book.created_at.between(now - datetime.timedelta(hours=5), now)
).all()
</code></pre>

<h3>Conditional sum</h3>

<pre><code class="sql">SELECT SUM(((status IN (4, 7))::int)) as books ...
</code></pre>

<pre><code class="python">&gt; from sqlalchemy.sql.expression import case
&gt; db.session.query(
    func.sum(case([(Book.status.in_((4, 7)), 1)], else_=0)).label('books'),
).filter(
    # ...
).all()
</code></pre>

<h3>In</h3>

<pre><code class="python">&gt; Book.query.filter(
    Book.status.in_((
        BOOK_CONFIRMED,
        BOOK_FINISHED,
    )),
).count()
</code></pre>

<h3>Other examples</h3>

<pre><code class="python">today = datetime.datetime.utcnow().date()
six_months_ago = today - relativedelta(months=6)

books = db.session.query(
    func.to_char(Book.created_at, 'MM'),
    func.count(Book.created_at)
).filter(
    Book.author_id == author.id,  # Filter books by author
).filter(
    Book.created_at.between(six_months_ago_min, today_max)  # Get all books created in last six months
).group_by(
    func.to_char(Book.created_at, 'MM')
).order_by(func.to_char(Book.created_at, 'MM')).all()
</code></pre>
]]></content>
  </entry>
  
</feed>
