<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Cansada de ser feliz]]></title>
  <link href="http://blog.vero4ka.info/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.vero4ka.info/"/>
  <updated>2017-04-03T22:16:06-05:00</updated>
  <id>http://blog.vero4ka.info/</id>
  <author>
    <name><![CDATA[vero4ka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cómo hacer bot para Facebook en Python]]></title>
    <link href="http://blog.vero4ka.info/blog/2017/02/04/como-hacer-bot-para-facebook-en-python/"/>
    <updated>2017-02-04T11:27:15-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2017/02/04/como-hacer-bot-para-facebook-en-python</id>
    <content type="html"><![CDATA[<p>Primero creamos una aplicación en Facebook, vamos al menú de configuración y agregamos el servicio de messenger (&ldquo;Add Product&rdquo;):</p>

<p><img class="center" src="/images/bots/fb_bot_webhook.png"></p>

<!-- more -->


<p>Luedo vamos a hacer click en el botón &ldquo;Setup Webhooks&rdquo;:</p>

<p><img class="center" src="/images/bots/fb_bot_register.png"></p>

<p>Para poder verificar que nuestro bot esté bien configurado, Facebook nos mandará una peticicón GET a nuestro servidor</p>

<pre><code>GET https://mipagina.com/bot/fb-webhook/?hub.mode=subscribe&amp;hub.challenge=1122334455&amp;hub.verify_token=una-frase-secreta
</code></pre>

<p>y esperará que le respondemos con el código 200 y el contenido del paramentro <code>hub.challenge</code> cuando <code>verify_token</code> coincide con la frase secreta que especificamos, o con el código HTTP 403 en el caso opuesto.</p>

<p>Entonces esribimos una vista que se encargará de eso:</p>

<p><figure class='code'><figcaption><span>urls.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="c"># &amp;hellip;</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span>
</span><span class='line'>        <span class="s">r&#39;fb-webhook/$&amp;lsquo;,</span>
</span><span class='line'>        <span class="n">FacebookCommandReceiveView</span><span class="o">.</span><span class="n">as_view</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">name</span><span class="o">=</span><span class="s">&#39;fb_webhook&amp;rsquo;,</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="c"># &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>urls.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">FacebookCommandReceiveView</span><span class="p">(</span><span class="n">View</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;hub.mode&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;subscribe&#39;</span> <span class="ow">and</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;hub.verify_token&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="n">settings</span><span class="o">.</span><span class="n">FACEBOOK_VERIFY_TOKEN</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;hub.challenge&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponseForbidden</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Cuando la vista esté lista y desplegada en producción, podemos oprimir el botón &ldquo;Verify and Save&rdquo;. Después de eso Facebook nos dará un token de la aplicación y permitirá configurar un <em>webhook</em>:</p>

<p><img class="center" src="/images/bots/fb_bot_settings.png"></p>

<p>Ahora podemos suscribirnos a los eventos en messenger, es decir: cada vez que alguien escibe un mensaje vía messanger a nuestra página de Facebook, Facebook enviará una petición POST al weebhook con el JSON que tendrá todos los datos del mensaje.</p>

<p><img class="center" src="/images/bots/fb_bot_add_subscription.png"></p>

<p>Desúés de oprimir el botón &ldquo;Add to Subscription&rdquo;, Facebook nos mostrará el enlace &ldquo;Edit notes&rdquo;:</p>

<p><img class="center" src="/images/bots/fb_bot_current_subscription.png"></p>

<p>Damos click en &ldquo;Edit notes&rdquo; y entramos a el formulario de configuración. Aquí especificamos la página a los mensajes de la cual vamos a suscribirnos e escribimos ejemplos de respuestas que dará nuesto bot a ciertos mensajes en Messanger:</p>

<p><img class="center" src="/images/bots/fb_bot_edit_subscription.png"></p>

<p>Eso sirve para que Facebook pueda verificar que nuestro bot efectivamente responde bien a los mensajes de chat.</p>

<p>Después de que Facebook verifique el comportamiento de nuestro bot, recibimos el mensaje de aprobación, diciendo que desde ahora nuestro bot está activo:</p>

<p><img class="center" src="/images/bots/fb_bot_subscription_status.png"></p>

<p>Eso nos permite hacer pruebas de la plataforma, porque el bot va a poder responder sólo a los mensajer enviados por los administradores de nuestra página de Facebook.</p>

<p>Cuando nuestro bot esté listo, lo podemos activar para todos los usuarios (hacerlo público):</p>

<p><img class="center" src="/images/bots/fb_bot_publish.png"></p>

<p>Enlaces:</p>

<ul>
<li><a href="https://developers.facebook.com/docs/messenger-platform/guides/quick-start">Quick Start</a>: cómo crear y configurar webhooks.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask con todas las arandelas]]></title>
    <link href="http://blog.vero4ka.info/blog/2017/01/20/flask-con-todas-las-arandelas/"/>
    <updated>2017-01-20T09:18:28-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2017/01/20/flask-con-todas-las-arandelas</id>
    <content type="html"><![CDATA[<iframe src="//slides.com/vero4ka/flask-con-todas-las-arandelas/embed?style=light" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>




<!-- more -->


<h2>Para empezar</h2>

<p>Hay muchos recursos acerca de Flask en los internetes, pero aquí me gustaría mencionar los tres que considero fundamentales.</p>

<p>El primero, por supuesto, es la documentación oficial del framework: <a href="http://flask.pocoo.org/docs/">flask.pocoo.org/docs</a>.</p>

<p>Luego, es muy bueno mirar el libro de Miguel Grinberg: <a href="https://flaskbook.com/">flaskbook.com</a>, en donde se explica de forma bastante detallada cómo hacer una plataforma de publicación de entradas de blog. El código, que sirve como ejemplo en el libro, se puede encontrar en la página de github del autor. Como material complementario al libro, es muy recomendado echar una mirada en el <a href="https://blog.miguelgrinberg.com/">blog personal de Miguel Grinberg</a>, donde el autor cubre los temas más específicos del desarrollo en Flask.</p>

<p>Y ahora, como dijo el astronauta ruso Yuri Gagarin en el momento del despegue de su nave Vostok 1: &ldquo;¡Poyejali!&rdquo;&ldquo; (en ruso: Поехали!; se traduce como «¡Vámonos!»).</p>

<h2>Aplicación básica</h2>

<p>Empezamos con instalar <strong>Flask</strong>:</p>

<pre><code>$ mkvirtualenv pycon2017 -p python3
$ pip install Flask
</code></pre>

<p>Al momento de ésta presentación la última versión del framework es <strong>0.12</strong>.</p>

<p>Ahora creamos nuestra primera aplicación de Flask que va a ser sólo un archivo de Python:</p>

<p><figure class='code'><figcaption><span>app.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@app.route</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">World</span><span class="err">!</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>El decorador <code>route</code> nos ayuda a definir la ruta de URL para la vista llamada <code>hello</code> que simplemente devuelve al navegador la respuesta HTTP 200 con la frase &ldquo;Hello World!&rdquo;.</p>

<p>Corremos la aplicación con el siguiente comando:</p>

<pre><code>$ python app.py 
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
</code></pre>

<p>Y ahora lo podemos abrir en nuestro navegador:</p>

<p><img class="center" src="/images/flask/flask_01.png"></p>

<h2>manage.py</h2>

<p>Nosotros, por experiencia con otros frameworks, ya nos acostumbramos a la posibilidad de acceder al shell de Python de nuestra aplicación, o con poder correr comandos, que pertenecen a la aplicación, desde la consola. Para tener todo esto en Flask, instalamos un librería llamada <code>Flask-Script</code>.</p>

<pre><code>$ pip install Flask-Script
</code></pre>

<p>Ahora separamos nuestra aplicación en dos archivos: en el primero vamos iniciar la app de Flask, en la que especificamos la ruta de los archivos estáticos y del archivo de configuración (equivalente de <code>settings.py</code> en Django)</p>

<p><figure class='code'><figcaption><span>run.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">create_app</span><span class="p">():</span>
</span><span class='line'>    <span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">static_url_path</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">static</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">conf</span><span class="o">.</span><span class="n">config</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">app</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>y en el segundo vamos a colocar una instancia de <strong>Manager</strong>, que se encaragará de correr la aplicación con <code>python manage.py</code>:</p>

<p><figure class='code'><figcaption><span>manage.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask.ext.script</span> <span class="kn">import</span> <span class="n">Manager</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">run</span> <span class="kn">import</span> <span class="n">create_app</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">app</span> <span class="o">=</span> <span class="n">create_app</span><span class="p">()</span>
</span><span class='line'><span class="n">manager</span> <span class="o">=</span> <span class="n">Manager</span><span class="p">(</span><span class="n">app</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@app.route</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">World</span><span class="err">!</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">rsquo</span><span class="p">;:</span>
</span><span class='line'>    <span class="n">manager</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Corriendo el siguiente comando en la consola</p>

<pre><code>$ ./manage.py runserver -h HOST -p PORT
</code></pre>

<p>podemos ver la misma aplicación, como en el paso anterior, pero ahora podemos además acceder a shell usando el comando</p>

<pre><code>$ ./manage.py shell
In [1]:
</code></pre>

<h2>Configuración</h2>

<p>Miremos con más atención la estructura del proyecto:</p>

<pre><code>├── conf
│   ├── config.py
│   ├── __init__.py
│   └── local_config.py
├── manage.py
└── run.py
</code></pre>

<p>Ahora tenemos una carpeta con los archivos de configuración - <code>conf</code>:</p>

<p><figure class='code'><figcaption><span>conf/config.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">DEBUG</span> <span class="o">=</span> <span class="bp">False</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">:</span>
</span><span class='line'>        <span class="kn">from</span> <span class="nn">test_config</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="kn">from</span> <span class="nn">local_config</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Más información acerca de la configuración en Flask se puede encontrar en la página <a href="http://flask.pocoo.org/docs/0.12/config/">flask.pocoo.org/docs/0.12/config/</a>.</p>

<h2>Blueprints</h2>

<p>Cuando nuestro archivo con las vistas crezca, vamos a querer a separar la lógica de nuestra aplicación en módulos diferentes (así como lo tenemos con apps de Django):</p>

<pre><code>├── conf
│   ├── config.py
│   ├── __init__.py
│   └── local_config.py
├── app1
│   ├── templates
│   └── views.py
├── app2
│   ├── templates
│   └── views.py
├── manage.py
└── run.py
</code></pre>

<p>En este caso nos ayuda un concepto de crear aplicaciones llamado <strong>Blueprints</strong>. La información completa acerca de Blueprints se puede encontrar en la documentación de Flask: <a href="http://flask.pocoo.org/docs/0.12/blueprints/">flask.pocoo.org/docs/0.12/blueprints/</a>.</p>

<p>Creamos un Blueprint para nuestra aplicación, donde vamos a guardar las vistas relacionadas a nuestros usuarios, por ejemplo:</p>

<p><figure class='code'><figcaption><span>users/views.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Blueprint</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">users</span> <span class="o">=</span> <span class="n">Blueprint</span><span class="p">(</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">template_folder</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">templates</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@users.route</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">Worlds</span><span class="err">!</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>y lo registramos en el archivo <code>run.py</code>:</p>

<p><figure class='code'><figcaption><span>run.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">create_app</span><span class="p">():</span>
</span><span class='line'>    <span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">static_url_path</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">static</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">conf</span><span class="o">.</span><span class="n">config</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">users.views</span> <span class="kn">import</span> <span class="n">users</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">register_blueprint</span><span class="p">(</span><span class="n">users</span><span class="p">,</span> <span class="n">url_prefix</span><span class="o">=</span><span class="s">&#39;/users&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">app</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>indicando en el argumento <code>url_prefix</code> del método <code>register_blueprint</code>, que todos los URLs, relacionados con el Blueprint de usuario, van a empezar con el prefijo <code>/users</code>, por ejemplo: <a href="http://localhost:5000/users/">http://localhost:5000/users/</a>.</p>

<h2>URLs</h2>

<p>Miremos cómo se definen los URLs en Flask.</p>

<p>Primero, hay formas diferentes de especificar la ruta: usando el decorador de Blueprint <code>@users.route</code> o el método <code>users.add_url_rule</code>:</p>

<pre><code class="python">@users.route('/user/&lt;name&gt;')
def user_profile(name):
    return '&lt;h1&gt;Hello, {}!&lt;/h1&gt;'.format(name)

def users_list():
    pass
users.add_url_rule('/', 'users_list', users_list)
</code></pre>

<p>En el primer ejemplo podemos ver, que a la vista se pasa el parámetro de URL <code>name</code>, al que luego accedemos desde el parámetro <code>name</code> de la vista <code>user_profile</code>.</p>

<p>Flaks permite especificar el tipo de parámetro que esperamos. Por ejemplo, para los números enteros, el decorador de escribe así:</p>

<pre><code class="python">@users.route('/user/&lt;int:pk&gt;')
def user_detail(pk):
    return '&lt;h1&gt;Hello, user #{}!&lt;/h1&gt;'.format(pk)
</code></pre>

<p>También se puede explícitamente indicar el método HTTP, que acepta la vista.</p>

<pre><code class="python">@users.route('/user/&lt;int:pk&gt;/create', methods=('POST',))
def user_create(pk):
    pass
</code></pre>

<p>En este caso al tratar de acceder a la vista con el método GET, obtenemos el error 405 (Method not allowed).</p>

<p>Para obtener el URL, que corresponde a la vista usamos el método <code>url_for</code>, al que pasamos el nombre del Blueprint y el nombre de la vista:</p>

<pre><code class="python">from flask import url_for

url_for('users.user_detail', pk=user_pk)
</code></pre>

<h2>Vistas</h2>

<h4>Request</h4>

<p>En Flask el objeto <code>request</code> no se está pasando como parámetro al la vista (como en Django, por ejemplo), sino que es una variable global:</p>

<pre><code>GET http://localhost:5000/users/user/1?q=foo
</code></pre>

<p><figure class='code'><figcaption><span>users/views.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Blueprint</span><span class="p">,</span> <span class="n">request</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">users</span> <span class="o">=</span> <span class="n">Blueprint</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">template_folder</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">templates</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@users.route</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">user</span><span class="o">/&amp;</span><span class="n">lt</span><span class="p">;</span><span class="nb">int</span><span class="p">:</span><span class="n">pk</span><span class="o">&gt;&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user_detail</span><span class="p">(</span><span class="n">pk</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">method</span><span class="p">)</span>  <span class="c"># GET</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>    <span class="c"># ImmutableMultiDict([(&amp;lsquo;q&amp;rsquo;, u&#39;foo&#39;)])</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Hello</span><span class="p">,</span> <span class="n">user</span> <span class="c">#{}!&lt;/h1&gt;&amp;rsquo;.format(pk)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Decoradores</h4>

<p>Aparte de la definición de ruta, la vista en Flask puede tener otros decoradores, por ejemplo:</p>

<p><figure class='code'><figcaption><span>users/views.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@users.route</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">user</span><span class="o">/&amp;</span><span class="n">lt</span><span class="p">;</span><span class="nb">int</span><span class="p">:</span><span class="n">pk</span><span class="o">&gt;&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="nd">@login_required</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user_detail</span><span class="p">(</span><span class="n">pk</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Hello</span><span class="p">,</span> <span class="n">user</span> <span class="c">#{}!&lt;/h1&gt;&amp;rsquo;.format(pk)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Plantillas</h2>

<p>Ahora vamos a renderizar una plantilla desde nuestra vista. Para eso vamos a usar el método <code>render_template</code> que recibe como argumentos la ruta hasta la plantilla dentro de la carpeta que especificamos en el parámetro <code>template_folder</code> del Blueprint, y los demás argumentos que son los parámetros de contexto.</p>

<p><figure class='code'><figcaption><span>users/views.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Blueprint</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">render_template</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">users</span> <span class="o">=</span> <span class="n">Blueprint</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">template_folder</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">templates</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@users.route</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">user</span><span class="o">/&amp;</span><span class="n">lt</span><span class="p">;</span><span class="nb">int</span><span class="p">:</span><span class="n">pk</span><span class="o">&gt;&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user_detail</span><span class="p">(</span><span class="n">pk</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="o">/</span><span class="n">detail</span><span class="o">.</span><span class="n">html</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">user_id</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>users/templates/users/detail.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Hello, user #{{ user_id }}!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Jinja2</h3>

<p>Para renderizar plantillas Flask usa el lenguaje <code>Jinja2</code>. Vamos a mirar algunas de sus funcionalidades:</p>

<h4>Variables:</h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{ foo.bar }}
</span><span class='line'>{{ foo[<span class="ni">&amp;lsquo;</span>bar<span class="ni">&amp;rsquo;</span>] }}
</span></code></pre></td></tr></table></div></figure></p>

<h4>Condicionales:</h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if user.address %}
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>{{ user.address }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure></p>

<h5>Bucles:</h5>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% for user in users %}
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>{{ user.name }}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>{% else %}
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>No hay usuarios<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>{% endfor %}
</span></code></pre></td></tr></table></div></figure></p>

<h5>Bloques:</h5>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% block title %}Usuarios{% endblock %}
</span></code></pre></td></tr></table></div></figure></p>

<h5>Extender una plantilla base:</h5>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends <span class="ni">&amp;ldquo;</span>layouts/main.html<span class="ni">&amp;rdquo;</span> %}
</span></code></pre></td></tr></table></div></figure></p>

<h4>Comentario:</h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{# Texto #}
</span></code></pre></td></tr></table></div></figure></p>

<h5>Incluir otra plantilla:</h5>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% with rating=user.rating %}
</span><span class='line'>    {% include <span class="ni">&amp;lsquo;</span>includes/_rating.html<span class="ni">&amp;rsquo;</span> %}
</span><span class='line'>{% endwith %}
</span></code></pre></td></tr></table></div></figure></p>

<h5>Asignar un valor a una variable local:</h5>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% set permissions = user.get_permission() %}
</span><span class='line'>{{ permissions }}
</span></code></pre></td></tr></table></div></figure></p>

<h5>Filtros:</h5>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{ user.address|default(<span class="ni">&amp;lsquo;</span>N/A<span class="ni">&amp;rsquo;</span>) }}
</span></code></pre></td></tr></table></div></figure></p>

<h2>Procesadores de contexto</h2>

<p>De forma predeterminada, el contexto de todas las plantillas ya tiene las siguientes variables:</p>

<ul>
<li><code>config</code> - Objeto de configuración (<code>flask.config</code>)</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{ config.DEBUG }}
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><code>request</code> - Objeto de la petición actual (<code>flask.request</code>)</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{ request.path }}
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><code>session</code> - Objeto de sesión (<code>flask.session</code>)</li>
<li><code>g</code> - Variables globales</li>
</ul>


<p>Hay una forma de tener <code>context_processors</code> (como en Django) para poder pasar variables a todas las plantillas del proyecto:</p>

<p><figure class='code'><figcaption><span>run.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">create_app</span><span class="p">():</span>
</span><span class='line'>    <span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">static_url_path</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">static</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">conf</span><span class="o">.</span><span class="n">config</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">users.views</span> <span class="kn">import</span> <span class="n">users</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">register_blueprint</span><span class="p">(</span><span class="n">users</span><span class="p">,</span> <span class="n">url_prefix</span><span class="o">=</span><span class="s">&#39;/users&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.context_processor</span>
</span><span class='line'><span class="k">def</span> <span class="nf">constants_processor</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;say_hello&#39;</span><span class="p">:</span> <span class="s">&#39;Hola&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">app</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Ahora podemos acceder a la variable <code>say_hello</code> desde todas las plantillas sin tener que pasarla cada vez explícitamente:</p>

<p><figure class='code'><figcaption><span>users/templates/users/detail.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{ say_hello }}, user #{{ user_id }}!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Modelos</h2>

<h3>SQLAlchemy</h3>

<p>Hay dos librerías que nos permiten trabajar con modelos y hacer peticiones SQL desde Flask.</p>

<pre><code>$ pip install SQLAlchemy
$ pip install Flask-SQLAlchemy
</code></pre>

<p>Una es <code>SQLAlchemy</code> y la otra es su extensión para Flask - <code>Flask-SQLAlchemy</code>, que viene con algunas funcionalidades adicionales y útiles en el desarrollo web, por ejemplo, el método <code>first_or_404()</code> para obtener el primer elemento del query o error HTTP 404 si no existe, o el método <code>paginate()</code> para realizar paginación sobre los objetos de <code>BaseQuery</code>.</p>

<p>Ahora incluimos <code>SQLAlchemy</code> como una aplicación externa de nuestro proyecto. Primero creamos una variable <code>db</code> para que el import no se rompa cuando la aplicación todavía no se ha inicializado, y en <code>create_app</code> cuando inicializamos la aplicación: <code>db.init_app(app)</code>.</p>

<p><figure class='code'><figcaption><span>run.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask_sqlalchemy</span> <span class="kn">import</span> <span class="n">SQLAlchemy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">db</span> <span class="o">=</span> <span class="n">SQLAlchemy</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">create_app</span><span class="p">():</span>
</span><span class='line'>    <span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">static_url_path</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">static</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">conf</span><span class="o">.</span><span class="n">config</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">db</span><span class="o">.</span><span class="n">init_app</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">app</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>En el archivo de configuración colocamos la ruta hacia nuestra base de datos.</p>

<p><figure class='code'><figcaption><span>conf/config.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">SQLALCHEMY_DATABASE_URI</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">sqlite</span><span class="p">:</span><span class="o">////</span><span class="n">tmp</span><span class="o">/</span><span class="n">test</span><span class="o">.</span><span class="n">db</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Y ahora podemos crear los modelos. Aquí en el ejemplo se puede ver cómo definir modelos, columnas de tipos diferentes y crear llaves foráneas</p>

<p><figure class='code'><figcaption><span>users/models.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">run</span> <span class="kn">import</span> <span class="n">db</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">tablename</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">username</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">80</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">email</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">120</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">city_id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">u&#39;cities.id&#39;</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">created_at</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">DateTime</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">db</span><span class="o">.</span><span class="n">func</span><span class="o">.</span><span class="n">now</span><span class="p">())</span>
</span><span class='line'><span class="n">updated_at</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">DateTime</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">db</span><span class="o">.</span><span class="n">func</span><span class="o">.</span><span class="n">now</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">onupdate</span><span class="o">=</span><span class="n">db</span><span class="o">.</span><span class="n">func</span><span class="o">.</span><span class="n">now</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;&amp;lt;Usuario </span><span class="si">%r</span><span class="s">&amp;gt;&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">username</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">City</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">tablename</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">cities</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">relationship</span><span class="p">(</span><span class="s">&#39;User&#39;</span><span class="p">,</span> <span class="n">backref</span><span class="o">=</span><span class="s">&#39;city&#39;</span><span class="p">,</span> <span class="n">lazy</span><span class="o">=</span><span class="s">&#39;dynamic&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>CRUD</h3>

<p>Miramos los métodos de CRUD básicos que nos ofrece el ORM de SQLAlchemy.</p>

<h5>Crear</h5>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">(</span><span class="n">email</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#x6a;&amp;#111;&amp;#x68;&amp;#110;&amp;#x40;&amp;#x65;&amp;#120;&amp;#x61;&amp;#109;&amp;#112;&amp;#x6c;&amp;#101;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#109;&quot;</span><span class="o">&gt;&amp;</span><span class="c">#106;&amp;#111;&amp;#104;&amp;#110;&amp;#x40;&amp;#x65;&amp;#x78;&amp;#x61;&amp;#x6d;&amp;#112;&amp;#108;&amp;#x65;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&amp;rsquo;, username=&amp;lsquo;&amp;rsquo;)</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<h5>Obtener todos los usuarios</h5>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>  <span class="c"># [&lt;Usuario john&#39;&gt;, &lt;Usuario u&#39;admin&#39;&gt;]</span>
</span></code></pre></td></tr></table></div></figure></p>

<h5>Obtener el primer usuario</h5>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">john</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>  <span class="c"># &lt;Usuario &#39;john&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h5>Filtrar usuarios y ordenar</h5>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">User</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">username</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">john</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="n">User</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">User</span><span class="o">.</span><span class="n">created_at</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">()</span> <span class="o">-</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">desc</span><span class="p">())</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<h5>Borrar</h5>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>BaseQuery</code> no tiene método <code>save()</code>, sino todos los cambios que hacemos a objetos de modelos se agregan a la sesión. Como la sesión sólo vive durante la petición, para que nuestos cambios sean enviados a la base de datos, hace falta llamar el método <code>db.session.commit()</code>.</p>

<h2>Formularios</h2>

<p>Existen varias librerías de Python que nos permiten trabajar con formularios. En este ejemplo vamos a mirar una llamada <code>Flask-WTF</code>.</p>

<pre><code>$ pip install Flask-WTF
$ pip install Flask-Bootstrap
</code></pre>

<p>Vamos a usarla junto con una librería complementaria - <code>Flask-Bootstrap</code> - que lo único que hace es generar el código de HTML del formulario con la estructura y las clases de <a href="http://getbootstrap.com/2.3.2/">Twitter Bootstrap</a> (lo mismo que hace <code>django-crispy-forms</code>).</p>

<p><figure class='code'><figcaption><span>users/forms.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">wtforms</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask_wtf</span> <span class="kn">import</span> <span class="n">Form</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">UserForm</span><span class="p">(</span><span class="n">Form</span><span class="p">):</span>
</span><span class='line'>    <span class="n">email</span> <span class="o">=</span> <span class="n">wtforms</span><span class="o">.</span><span class="n">StringField</span><span class="p">(</span>
</span><span class='line'>        <span class="n">validators</span><span class="o">=</span><span class="p">[</span>
</span><span class='line'>            <span class="n">wtforms</span><span class="o">.</span><span class="n">validators</span><span class="o">.</span><span class="n">Email</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">wtforms</span><span class="o">.</span><span class="n">validators</span><span class="o">.</span><span class="n">DataRequired</span><span class="p">(),</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">username</span> <span class="o">=</span> <span class="n">wtforms</span><span class="o">.</span><span class="n">StringField</span><span class="p">(</span>
</span><span class='line'>        <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">wtforms</span><span class="o">.</span><span class="n">validators</span><span class="o">.</span><span class="n">DataRequired</span><span class="p">()],</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">submit</span> <span class="o">=</span> <span class="n">wtforms</span><span class="o">.</span><span class="n">SubmitField</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Save</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Ahora podemos renderizar el formulario en nuestra plantilla:</p>

<p><figure class='code'><figcaption><span>users/templates/users/form.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends <span class="ni">&amp;ldquo;</span>layouts/main_layout.html<span class="ni">&amp;rdquo;</span> %}
</span><span class='line'>{% import <span class="ni">&amp;ldquo;</span>bootstrap/wtf.html<span class="ni">&amp;rdquo;</span> as wtf %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% block content %}
</span><span class='line'>  {{ wtf.quick_form(form) }}
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure></p>

<p>Este código nos va a renderizar el formulario completo con todos los campos especificados. Si queremos renderizar sólo algunos campos específicos, podemos escribirlo de la siguiente forma:</p>

<p><figure class='code'><figcaption><span>users/templates/users/form.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{ wtf.form_field(form.email) }}
</span><span class='line'>{{ wtf.form_field(form.submit) }}
</span></code></pre></td></tr></table></div></figure></p>

<p>Lo único que hace falta es escribir una vista que reciba los datos del formulario y los guarde en la base de datos, por ejemplo.</p>

<p>El diccionario con los valores para cada campo se encuentra en la variable <code>request.form</code>. Si el request tiene método POST, validamos el formulario <code>form.validate()</code>, y en el caso exitoso, pasamos los valores del formulario a nuestro objeto: <code>form.populate_obj(user)</code>.</p>

<p><figure class='code'><figcaption><span>users/views.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@users.route</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">update</span><span class="o">/&amp;</span><span class="n">lt</span><span class="p">;</span><span class="nb">int</span><span class="p">:</span><span class="n">pk</span><span class="o">&gt;/&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">methods</span><span class="o">=</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">GET</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">POST</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;))</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user_update</span><span class="p">(</span><span class="n">pk</span><span class="p">):</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span><span class="o">.</span><span class="n">first_or_404</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">form</span> <span class="o">=</span> <span class="n">UserForm</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;POST&#39;</span> <span class="ow">and</span> <span class="n">form</span><span class="o">.</span><span class="n">validate</span><span class="p">():</span>
</span><span class='line'>    <span class="n">form</span><span class="o">.</span><span class="n">populate_obj</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">flash</span><span class="p">(</span><span class="s">&#39;Usuario fue editado exitosamente&#39;</span><span class="p">,</span> <span class="s">&#39;success&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">&#39;users.user_detail&#39;</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">render_template</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;users/form.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">form</span><span class="o">=</span><span class="n">form</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Autenticación</h2>

<p>Para agregar autenticación al proyecto de Flask, normalmente usan las dos siguientes librerías:</p>

<pre><code>$ pip install Flask-Login
$ pip install Flask-OAuth
</code></pre>

<p>La primera tiene toda la funcionalidad de ingreso, salida de usuario. La podemos instalar de la misma forma, que hicimos con SQLAlchemy hace poco:</p>

<p><figure class='code'><figcaption><span>run.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask_login</span> <span class="kn">import</span> <span class="n">LoginManager</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">login_manager</span> <span class="o">=</span> <span class="n">LoginManager</span><span class="p">()</span>
</span><span class='line'><span class="n">login_manager</span><span class="o">.</span><span class="n">login_view</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="o">.</span><span class="n">login</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">create_app</span><span class="p">():</span>
</span><span class='line'>    <span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">static_url_path</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">static</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">conf</span><span class="o">.</span><span class="n">config</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">permanent_session_lifetime</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">365</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">login_manager</span><span class="o">.</span><span class="n">init_app</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>En <code>login_manager.login_view</code> especificamos qué vista corresponde al ingreso (login), y en <code>permanent_session_lifetime</code>  se puede indicar el tiempo en el qué durará activa la sesión.</p>

<p>El modelo que vamos a usar para usuarios debe heredar de <code>UserMixin</code> de <code>flask_logins</code></p>

<p><figure class='code'><figcaption><span>users/models.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask_login</span> <span class="kn">import</span> <span class="n">UserMixin</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">run</span> <span class="kn">import</span> <span class="n">db</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">,</span> <span class="n">UserMixin</span><span class="p">):</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">tablename</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="c"># ...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Y ahora usando la otra librería - <code>Flask-OAuth</code> - podemos hacer una vista para que nuestros usuarios puedan ingresar desde su cuenta de Google, por ejemplo:</p>

<p><figure class='code'><figcaption><span>users/views.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@users.route</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">login</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
</span><span class='line'>    <span class="n">callback</span> <span class="o">=</span> <span class="n">url_for</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="o">.</span><span class="n">authorized</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">_external</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">google</span><span class="o">.</span><span class="n">authorize</span><span class="p">(</span><span class="n">callback</span><span class="o">=</span><span class="n">callback</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Cuando el usuario ya está autenticado, en cualquier punto de nuestra aplicación podemos preguntar por el objeto correspondiente:</p>

<pre><code class="python">from flask_login import current_user
</code></pre>

<p>En la siguiente dirección se puede encontrar más información acerca de cómo configurar los tokens de autenticación Google: <a href="https://pythonhosted.org/Flask-OAuth/">pythonhosted.org/Flask-OAuth/</a>.</p>

<h2>Múltiples idiomas</h2>

<p>Si queremos tener soporte de múltiples idiomas, tendremos que instalar otra librería:</p>

<pre><code>$ pip install Flask-Babel
</code></pre>

<p>Miremos qué comandos nos ofrece:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Extraer los textos para traducción&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">(</span>se corre sólo una vez al principio<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>pybabel extract -F babel.cfg -o messages.pot .&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Generar un catálogo para español&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>pybabel init -i messages.pot -d translations -l es&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Se crea el directorio translations/es&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Por dentro hay otro directorio llamado LC_MESSAGES que tiene&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;un archivo messages.po.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Después de traducir los textos y guardarlos en messages.po,&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;compilamos el archivo y publicamos los textos:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>pybabel compile -d translations&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Para actualizar las traducciones a diario:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>pybabel extract -F babel.cfg -o messages.pot .
</span><span class='line'><span class="nv">$ </span>pybabel update -i messages.pot -d translations
</span></code></pre></td></tr></table></div></figure></p>

<p>Si queremos traducir cadenas de texto dentro del código de Python, habrá que usar la siguiente sintaxis:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask_babel</span> <span class="kn">import</span> <span class="n">gettext</span> <span class="k">as</span> <span class="n">_</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">_</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Invalid</span> <span class="n">authentication</span> <span class="n">token</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Y en plantillas se ve muy parecido:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">title=</span><span class="s">&quot;{{ _(&#39;Help&#39;) }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;fa fa-question&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'><span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Mensajes</h2>

<p>Los que están familiarizados con el framework Django, seguramente recuerdan que Django tiene un procesador de contexto <code>messages</code> que nos permite mandar mensajes a las plantillas desde el código Python:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">messages</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">messages</span><span class="o">.</span><span class="n">add_message</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">messages</span><span class="o">.</span><span class="n">INFO</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">world</span><span class="o">.&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>En Flask es muy parecido, sólo que esos mensajes se llaman <code>flash</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">flash</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">flash</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">world</span><span class="o">.&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">success</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>y para consultarlos dentro de la plantilla llamamos el método <code>get_flashed_messages</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% for category, message in get_flashed_messages(with_categories=true) %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;alert alert-{{ category|replace(&#39;message&#39;, &#39;info&#39;) }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">class=</span><span class="s">&quot;close&quot;</span> <span class="na">data-dismiss=</span><span class="s">&quot;alert&quot;</span><span class="nt">&gt;</span>×<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  {{ message }}
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% endfor %}
</span></code></pre></td></tr></table></div></figure></p>

<h2>Caché</h2>

<p>Y para terminar la presentación, vamos a meter todo en caché #comonosgusta:</p>

<pre><code>$ pip install Flask-Cache
</code></pre>

<p>Ya conocemos cómo instalar las aplicaciones externas en Flask, pero repasémoslo:</p>

<p><figure class='code'><figcaption><span>run.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask_cache</span> <span class="kn">import</span> <span class="n">Cache</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">cache</span> <span class="o">=</span> <span class="n">Cache</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">create_app</span><span class="p">():</span>
</span><span class='line'>    <span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">static_url_path</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">static</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">conf</span><span class="o">.</span><span class="n">config</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cache</span><span class="o">.</span><span class="n">init_app</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Y ahora sí, vamos con toda&hellip; ponemos en caché una vista completa:</p>

<p><figure class='code'><figcaption><span>users/views.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">run</span> <span class="kn">import</span> <span class="n">cache</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@users.route</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="nb">list</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="nd">@cache.cached</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">,</span> <span class="n">key_prefix</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">user_list</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user_list</span><span class="p">():</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>y luego un fragmento de html:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% cache 60*60, <span class="ni">&amp;lsquo;</span>dashboard_menu_user<span class="ni">&amp;rsquo;</span> + current_user.id|string %}
</span><span class='line'>  {% include <span class="ni">&amp;lsquo;</span>layouts/_menu.html<span class="ni">&amp;rsquo;</span> %}
</span><span class='line'>{% endcache %}
</span></code></pre></td></tr></table></div></figure></p>

<h2>pip freeze</h2>

<p>Y ahora vamos resumir qué librerías hemos instalado y cuales otras nos podrían ser útiles en el futuro:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Framework&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>Flask==0.11&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Libs&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>celery==3.1.20
</span><span class='line'>coverage==4.0.3
</span><span class='line'>factory-boy==2.6.1
</span><span class='line'>SQLAlchemy==1.0.12
</span><span class='line'>SQLAlchemy-Utils==0.31.6&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Flask libs&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>Flask-And-Redis==0.6
</span><span class='line'>Flask-Babel==0.9               # Múltiples idiomas y zonas horarias
</span><span class='line'>Flask-Bootstrap==3.3.5.7       # ~ django-crispy-forms para Bootstrap
</span><span class='line'>Flask-Cache==0.13.1
</span><span class='line'>Flask-DebugToolbar==0.10.0     # En Django: django-debug-toolbar
</span><span class='line'>Flask-fillin==0.2              # Diligenciar formularios en pruebas
</span><span class='line'>Flask-Login==0.3.2
</span><span class='line'>Flask-Migrate==1.8.0
</span><span class='line'>Flask-Moment==0.5.1            # Integración con moment.js
</span><span class='line'>Flask-OAuth==0.12              # ~ python-social-auth
</span><span class='line'>Flask-Script==2.0.5            # manage.py, shell
</span><span class='line'>Flask-SQLAlchemy==2.1
</span><span class='line'>Flask-WTF==0.12                # Formularios con protección CSRF
</span><span class='line'>WTForms-Alchemy==0.15.0        # Para crear formularios basados en modelos
</span><span class='line'>WTForms-Components==0.10.0     # Campos adicionales para los formularios de Flask</span></code></pre></td></tr></table></div></figure></p>

<p><img class="center" src="/images/flask/nerd-dad.jpg"></p>

<p>Gracias por su atención y a <a href="https://tappsi.co/">Tappsi</a> por el apoyo.</p>

<p><img class="center" src="/images/flask/tappsi_logo.svg" width="100"></p>

<p>Estamos contratando <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#106;&#111;&#98;&#x73;&#64;&#x74;&#97;&#x70;&#x70;&#115;&#x69;&#x2e;&#x63;&#111;">&#106;&#x6f;&#x62;&#115;&#x40;&#116;&#97;&#x70;&#x70;&#x73;&#x69;&#46;&#99;&#111;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cómo desplegar un proyecto de Django con uWSGI + nginx + supervisor]]></title>
    <link href="http://blog.vero4ka.info/blog/2017/01/16/como-desplegar-un-proyecto-de-django-con-uwsgi-plus-nginx-plus-supervisor/"/>
    <updated>2017-01-16T17:39:09-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2017/01/16/como-desplegar-un-proyecto-de-django-con-uwsgi-plus-nginx-plus-supervisor</id>
    <content type="html"><![CDATA[<p>Suponemos que tenemos <a href="https://github.com/vero4karu/sitp_scraper">un proyecto</a> de Django y queremos desplegarlo en un servidor con un sistema operativo Linux.</p>

<p>La idea es que nuestro servidor web va a usar una interfaz (WSGI) para &ldquo;hablar&rdquo; con nuestra aplicación de Django. Esa interfaz va a correr la aplicación, pasarle las peticiones de usuario y devolver la respuesta. WSGI (Web Server Gateway Interface) es un estándar y uWSGI es una de sus implementaciones que vamos a usar:</p>

<pre><code>Usuario &lt;-&gt; Servidow web &lt;-&gt; Socket &lt;-&gt; uWSGI &lt;-&gt; Django
</code></pre>

<!-- more -->


<p>Decimos que el código del proyecto está en la carpeta <code>/home/deploy/sitp_scraper</code>. Primero creamos el entorno virtual e instalamos las librerías de Python proyecto (en éste ejemplo usamos <a href="https://virtualenvwrapper.readthedocs.io/en/latest/">virtualenvwrapper</a>):</p>

<pre><code>mkvirtualenv stip_scraper
pip install -r requitements.txt
</code></pre>

<p>Instalamos uWSGI:</p>

<pre><code>pip install uwsgi
</code></pre>

<p>Verificamos si podemos correr nuestro proyecto si problema:</p>

<pre><code>./manage.py runserver 0.0.0.0:8000
</code></pre>

<p>Ahora probamos correrlo usando uWSGI:</p>

<pre><code>uwsgi --http :8000 --module stip_scraper.wsgi
</code></pre>

<p>Instalamos <a href="https://nginx.org/en/">nginx</a>:</p>

<pre><code>sudo apt-get install nginx
sudo /etc/init.d/nginx start 
</code></pre>

<p>Si al visitar <code>nuestroservidor.com:80</code> vemos el mensaje &ldquo;Welcome to nginx&rdquo;, podemos concluir que nginx funciona de la forma correcta.</p>

<p>Configuramos nginx <code>sitp_scraper_nginx.conf</code>:</p>

<pre><code class="nginx">upstream django {
    server unix:///tmp/sitp_scraper.sock;
}

server {
    listen 80;
    listen [::]:80;
    server_name  nuestroservidor.com;  # Nuestro dominio o dirección IP
    charset      utf-8;

    client_max_body_size 10M;  # Tamaño máximo de archivos que podrémos subir al servidor

    location /media  {
        # MEDIA_ROOT de nuestro proyecto de Django
        alias /home/deploy/sitp_scraper/media;
    }

    location /static {
        # STATIC_ROOT de nuestro proyecto de Django
        alias /home/deploy/sitp_scraper/static;

    }

    location / {
        uwsgi_pass  django;
        include     /home/deploy/sitp_scraper/uwsgi_params;
    }
}
</code></pre>

<p>El archivo <code>uwsgi_params</code> se puede descargar aquí: <a href="https://github.com/nginx/nginx/blob/master/conf/uwsgi_params">github.com/nginx/nginx/blob/master/conf/uwsgi_params</a></p>

<p>Creamos en la carpeta <code>/etc/nginx/sites-enabled</code> un enlace hacía nuestra configuración para que nginx pueda verla:</p>

<pre><code>sudo ln -s ~/path/to/your/sitp_scraper_nginx.conf /etc/nginx/sites-enabled/
</code></pre>

<p>Verificamos si nuestra configuración está bien:</p>

<pre><code>nginx -t
</code></pre>

<p>y reiniciamos nginx:</p>

<pre><code>sudo /etc/init.d/nginx restart
</code></pre>

<p>Ahora creamos un archivo <code>sitp_scraper_uwsgi.ini</code> para guardar las opciones que vamos a pasar a uWSGI:</p>

<pre><code>[uwsgi]
# Django-related settings
chdir           = /home/deploy/sitp_scraper
module          = sitp_scraper.wsgi
home            = /home/deploy/.virtualenvs/sitp_scraper

# Process-related settings
master          = true
processes       = 10

# The socket (use the full path to be safe)
socket          = /tmp/sitp_scraper.sock
chmod-socket    = 664
uid             = www-data
gid             = www-data

# Clear environment on exit
vacuum          = true
</code></pre>

<p>Agregamos nuestro usuario de Linux al grupo <code>www-data</code> (para no tener problemas con permisos) y verificamos que todo funcione bien:</p>

<pre><code>uwsgi --ini sitp_scraper_uwsgi.ini
</code></pre>

<p>Podemos ver que se creó un archvo <code>/tmp/sitp_scraper.sock</code>:</p>

<pre><code>ll /tmp/sitp_scraper.sock
srw-rw-r-- 1 www-data www-data 0 Jan 15 20:46 /tmp/sitp_scraper.sock
</code></pre>

<p>Ahora instalamos supervisor:</p>

<pre><code>apt-get install supervisor
service supervisor start
</code></pre>

<p>y creamos un archivo de configuración <code>/etc/supervisor/conf.d/sitp_scraper.conf</code></p>

<pre><code>[program:uwsgi]
user            = www-data
command = /home/deploy/.virtualenvs/sitp_scraper/bin/uwsgi --ini=/home/deploy/sitp_scraper/sitp_scraper_uwsgi.ini
autostart       = true
autorestart     = true
stderr_logfile  = /tmp/uwsgi_err.log
stdout_logfile  = /tmp/uwsgi.log
stopsignal=INT
</code></pre>

<p>Reiniciamos supervisor:</p>

<pre><code>$ supervisorctl  
uwsgi                            RUNNING   pid 2762, uptime 1 day, 2:39:40
supervisor&gt; restart uwsgi
</code></pre>

<p>Voilà: <code>nuestroservidor.com:80</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to upload a file to Amazon S3 and generate a pre-signed URL]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/10/27/how-to-upload-a-file-to-amazon-s3-and-generate-a-pre-signed-url/"/>
    <updated>2016-10-27T09:32:43-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/10/27/how-to-upload-a-file-to-amazon-s3-and-generate-a-pre-signed-url</id>
    <content type="html"><![CDATA[<pre><code class="python">import datetime
import StringIO
import xlwt

from boto3.session import Session
from boto3 import client

# Create a file, for example, an Excel document.
xls = xlwt.Workbook()
ws = xls.add_sheet('A Test Sheet')
ws.write(0, 0, 1234.56)

file_name = 'example.xls'
output = StringIO.StringIO()
xls.save(output)

# Save the file to S3
session = Session(
    aws_access_key_id=config['AWS_ACCESS_KEY_ID'],
    aws_secret_access_key=config['AWS_SECRET_ACCESS_KEY'],
)
s3 = session.resource('s3')
s3_bucket_name = 'YourBucket'
s3_file_key = 'dir1/dir2/{}'.format(file_name)

result = s3.Bucket(s3_bucket_name).put_object(
    Key=s3_file_key,
    Body=output.getvalue()
)

# Generate a pre-signed URL
s3_client = client(
    's3',
    region_name='us-east-1',
    aws_access_key_id=config['AWS_ACCESS_KEY_ID'],
    aws_secret_access_key=config['AWS_SECRET_ACCESS_KEY'],
)

url = s3_client.generate_presigned_url(
    ClientMethod='get_object',
    Params={
        'Bucket': s3_bucket_name,
        'Key': s3_file_key,
    },
    ExpiresIn=60 * 60 * 24,  # Default: 3600
)

print(url)
# https://s3.amazonaws.com/YourBucket/dir1/dir2/example.xls?AWSAccessKeyId=ATPAJNUDN3ENT2I4S6EF&amp;Expires=1477582080&amp;Signature=POvreXScdYNES98SPFeAN3y12DL%3D
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to send an email with attachment via Amazon SES in Python]]></title>
    <link href="http://blog.vero4ka.info/blog/2016/10/26/how-to-send-an-email-with-attachment-via-amazon-ses-in-python/"/>
    <updated>2016-10-26T14:19:26-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2016/10/26/how-to-send-an-email-with-attachment-via-amazon-ses-in-python</id>
    <content type="html"><![CDATA[<pre><code class="python">import xlwt
from boto3 import client

email_from = 'from@example.com'
email_to = 'to@example.com'

# Create a workbook
xls = xlwt.Workbook()
# Create a sheet
sheet = xls.add_sheet('Sheet name')
# Set styles for headers and dates
header_style = xlwt.easyxf('font: bold True;')
date_format = xlwt.XFStyle()
date_format.num_format_str = 'dd/mm/yyyy hh:mm:ss'

# Header
labels = [
    u'Title 1',
    u'Title 2',
]
content = [labels]

# Get data for other rows
for row in get_rows_with_content():
    content.append(list(row))

# Write it down
for row in range(len(content)):
    for col in range(len(content[row])):
        data = content[row][col]
        # If it's a header
        if row == 0:
            sheet.write(row, col, data, header_style)
            continue
        # If it's a date
        if type(data) == datetime.datetime:
            sheet.write(row, col, data, date_format)
        else:
            sheet.write(row, col, data)

# Set filename
today = datetime.date.today()
file_name = 'my_file_{}.xls'.format(today.strftime("%Y-%m-%d"))

# Save the file
output = StringIO.StringIO()
xls.save(output)

# Build an email
msg = MIMEMultipart()
msg['Subject'] = 'Hi, here is your file'
msg['From'] = email_from
msg['To'] = email_to
# What a recipient sees if they don't use an email reader
msg.preamble = 'Multipart message.\n'

# The attachment
part = MIMEApplication(output.getvalue())
part.add_header('Content-Disposition', 'attachment', filename=file_name)
part.add_header('Content-Type', 'application/vnd.ms-excel; charset=UTF-8')
msg.attach(part)

# Connect to Amazon SES
ses = client(
    'ses',
    region_name='us-east-1',
    aws_access_key_id=config['AWS_ACCESS_KEY_ID'],
    aws_secret_access_key=config['AWS_SECRET_ACCESS_KEY'],
)
# And finally, send the email
ses.send_raw_email(
    Source=email_from,
    Destinations=[email_to],
    RawMessage={
        'Data': msg.as_string(),
    }
)
</code></pre>

<p>If we need to create a ZIP archive first:</p>

<pre><code class="python">import zipfile
import tempfile
from email import encoders
from email.mime.multipart import MIMEMultipart, MIMEBase

# ....
output = StringIO.StringIO()
xls.save(output)

# Create zip file
zf = tempfile.TemporaryFile(prefix='fileprefix', suffix='.zip')
zip = zipfile.ZipFile(zf, 'w')
zip.writestr(file_name, output.getvalue())
zip.close()
zf.seek(0)

msg = MIMEMultipart()
msg['Subject'] = 'Hi, here is your file'
msg['From'] = email_from
msg['To'] = email_to

# What a recipient sees if they don't use an email reader
msg.preamble = 'Multipart message.\n'

# the attachment
part = MIMEBase('application', 'zip')
part.set_payload(zf.read())
encoders.encode_base64(part)
part.add_header(
    'Content-Disposition', 'attachment', 
    filename=u'{}.zip'.format(file_name),
)
msg.attach(part)
# ....
</code></pre>
]]></content>
  </entry>
  
</feed>
