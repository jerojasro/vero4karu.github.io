<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: facebook | Cansada de ser feliz]]></title>
  <link href="http://blog.vero4ka.info/blog/categories/facebook/atom.xml" rel="self"/>
  <link href="http://blog.vero4ka.info/"/>
  <updated>2017-04-03T21:50:51-05:00</updated>
  <id>http://blog.vero4ka.info/</id>
  <author>
    <name><![CDATA[vero4ka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Login con Facebook en Django]]></title>
    <link href="http://blog.vero4ka.info/blog/2017/03/20/login-con-facebook-en-django/"/>
    <updated>2017-03-20T15:24:49-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2017/03/20/login-con-facebook-en-django</id>
    <content type="html"><![CDATA[<p>Este ejemplo fue probado con la versión 1.10 de Django.</p>

<p>Primero instalamos las siguentes dos librerías que hacen parte del proyecto <a href="https://github.com/python-social-auth">Python Social Auth</a>:</p>

<pre><code class="bash">$ pip install social-auth-core
$ pip install social-auth-app-django
</code></pre>

<!-- more -->


<p>Agregamos la aplicación <code>social_django</code> a la lista <code>INSTALLED_APPS</code> del archivo <code>settings.py</code> en nuestro proyecto de Django:</p>

<pre><code class="python">INSTALLED_APPS = [
    'social_django',
]
</code></pre>

<p>Especificamos en <code>AUTHENTICATION_BACKENDS</code> que vamos a usar un backend adicional para ingresar con la cuenta de Facebook:</p>

<pre><code class="python">AUTHENTICATION_BACKENDS = [
    'social_core.backends.facebook.FacebookOAuth2',

    'django.contrib.auth.backends.ModelBackend',
]
</code></pre>

<p>y finalmente agregamos los procesadores de contexto:</p>

<pre><code class="python">TEMPLATES = [
    {
        ...
        'OPTIONS': {
            ...
            'context_processors': [
                ...
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                ...
            ]
        }
    }
]
</code></pre>

<p>Ahora podemos correr las migraciónes para crear las tablas que usa <code>social_django</code> para guargar las cuentas y relaciones con los usuarios de Django que ya tenemos:</p>

<pre><code class="bash">$ ./manage.py migrate
Running migrations:
  Applying social_django.0001_initial... OK
  Applying social_django.0002_add_related_name... OK
  Applying social_django.0003_alter_email_max_length... OK
  Applying social_django.0004_auto_20160423_0400... OK
  Applying social_django.0005_auto_20160727_2333... OK
  Applying social_django.0006_partial... OK
</code></pre>

<p>Agregamos las urls de <code>social_django</code> en <code>urls.py</code>:</p>

<pre><code class="python">url('', include('social_django.urls', namespace='social')),
</code></pre>

<p>Listo, con esto podemos agregar un enlace en alguna de nuestras plantillas:</p>

<p>{% codeblock templates/base.html lang:html %}
{% raw %}
<a href="{% url 'social:begin' 'facebook' %}?next={{ request.path }}">Login con Facebook</a>
{% endraw %}
{% endcodeblock %}</p>

<p>Especificamos que queremos asociar usuarios que ingresan con Facebook a nuestros usuario de Django por medio de correo electrónico:</p>

<pre><code class="python">SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',  # &lt;--- este
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)
</code></pre>

<p>Es decir: cuando un usuario va a ingresar a nuestra página con su cuenta de Facebook, la aplicación va a mirar si en la tabla de usuario ya existe uno con el mismo correo, y si es así, simplemente lo asocia al la cuenta de Facebook con la que el usuario ingresó. En el caso opuesto, se crea un nuevo registro en la tabla <code>users</code>.</p>

<p>Ahora tenemos que crear la aplicación de Facebook desde la página <a href="https://developers.facebook.com">developers.facebook.com</a>. Luego agregamos el servicio de &ldquo;Facebook Login&rdquo;:</p>

<p>{% img center /images/django/fb-app-login.png %}</p>

<p>Copiamos las llaves de la aplicación</p>

<p>{% img center /images/django/fb-app-key.png %}</p>

<p>y los pegamos en el archivo de configuración de Django:</p>

<p>{% codeblock settings.py lang:python %}
SOCIAL_AUTH_FACEBOOK_KEY = &lsquo;app-id&rsquo;
SOCIAL_AUTH_FACEBOOK_SECRET = &lsquo;app-secret&rsquo;
{% endcodeblock %}</p>

<p>Después de hacer los pasos anteriores, al momento de hacer click en &ldquo;Login con Facebook&rdquo;, la aplicación nos va a redirigir a la siguiente página:</p>

<p>{% img center /images/django/fb-login-1.png %}</p>

<p>Pero nosotros, al momento de login queremos obtener correo electrónico de nuestro usuario, por eso definimos el scope:</p>

<p>{% codeblock settings.py lang:python %}
SOCIAL_AUTH_FACEBOOK_IGNORE_DEFAULT_SCOPE = True
SOCIAL_AUTH_FACEBOOK_SCOPE = [
    &lsquo;email&rsquo;
]
{% endcodeblock %}</p>

<p>Y ahora sí, la aplicación pide acceso al correo electrónico:</p>

<p>{% img center /images/django/fb-login-2.png %}</p>

<p>Entramos en el administrador de Django y podemos ver que se creó un registro asociando al usuario que ya existía en la base de datos a su cuenta de Facebook:</p>

<p>{% img center /images/django/fb-app-django-admin.png %}</p>

<p>Enlaces:</p>

<ul>
<li><a href="https://developers.facebook.com/docs/facebook-login">Documentación de FB</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cómo hacer bot para Facebook en Python]]></title>
    <link href="http://blog.vero4ka.info/blog/2017/02/04/como-hacer-bot-para-facebook-en-python/"/>
    <updated>2017-02-04T11:27:15-05:00</updated>
    <id>http://blog.vero4ka.info/blog/2017/02/04/como-hacer-bot-para-facebook-en-python</id>
    <content type="html"><![CDATA[<p>Primero creamos una aplicación en Facebook, vamos al menú de configuración y agregamos el servicio de messenger (&ldquo;Add Product&rdquo;):</p>

<p>{% img center /images/bots/fb_bot_webhook.png %}</p>

<!-- more -->


<p>Luedo vamos a hacer click en el botón &ldquo;Setup Webhooks&rdquo;:</p>

<p>{% img center /images/bots/fb_bot_register.png %}</p>

<p>Para poder verificar que nuestro bot esté bien configurado, Facebook nos mandará una peticicón GET a nuestro servidor</p>

<pre><code>GET https://mipagina.com/bot/fb-webhook/?hub.mode=subscribe&amp;hub.challenge=1122334455&amp;hub.verify_token=una-frase-secreta
</code></pre>

<p>y esperará que le respondemos con el código 200 y el contenido del paramentro <code>hub.challenge</code> cuando <code>verify_token</code> coincide con la frase secreta que especificamos, o con el código HTTP 403 en el caso opuesto.</p>

<p>Entonces esribimos una vista que se encargará de eso:</p>

<p>{% codeblock urls.py lang:python %}
    # &hellip;
    url(
        r'fb-webhook/$&lsquo;,
        FacebookCommandReceiveView.as_view(),
        name='fb_webhook&rsquo;,
    ),
    # &hellip;
{% endcodeblock %}</p>

<p>{% codeblock urls.py lang:python %}
class FacebookCommandReceiveView(View):</p>

<pre><code>def get(self, request):
    if request.GET.get('hub.mode') == 'subscribe' and request.GET.get('hub.verify_token') == settings.FACEBOOK_VERIFY_TOKEN:
        return HttpResponse(request.GET.get('hub.challenge'))
    else:
        return HttpResponseForbidden()
</code></pre>

<p>{% endcodeblock %}</p>

<p>Cuando la vista esté lista y desplegada en producción, podemos oprimir el botón &ldquo;Verify and Save&rdquo;. Después de eso Facebook nos dará un token de la aplicación y permitirá configurar un <em>webhook</em>:</p>

<p>{% img center /images/bots/fb_bot_settings.png %}</p>

<p>Ahora podemos suscribirnos a los eventos en messenger, es decir: cada vez que alguien escibe un mensaje vía messanger a nuestra página de Facebook, Facebook enviará una petición POST al weebhook con el JSON que tendrá todos los datos del mensaje.</p>

<p>{% img center /images/bots/fb_bot_add_subscription.png %}</p>

<p>Desúés de oprimir el botón &ldquo;Add to Subscription&rdquo;, Facebook nos mostrará el enlace &ldquo;Edit notes&rdquo;:</p>

<p>{% img center /images/bots/fb_bot_current_subscription.png %}</p>

<p>Damos click en &ldquo;Edit notes&rdquo; y entramos a el formulario de configuración. Aquí especificamos la página a los mensajes de la cual vamos a suscribirnos e escribimos ejemplos de respuestas que dará nuesto bot a ciertos mensajes en Messanger:</p>

<p>{% img center /images/bots/fb_bot_edit_subscription.png %}</p>

<p>Eso sirve para que Facebook pueda verificar que nuestro bot efectivamente responde bien a los mensajes de chat.</p>

<p>Después de que Facebook verifique el comportamiento de nuestro bot, recibimos el mensaje de aprobación, diciendo que desde ahora nuestro bot está activo:</p>

<p>{% img center /images/bots/fb_bot_subscription_status.png %}</p>

<p>Eso nos permite hacer pruebas de la plataforma, porque el bot va a poder responder sólo a los mensajer enviados por los administradores de nuestra página de Facebook.</p>

<p>Cuando nuestro bot esté listo, lo podemos activar para todos los usuarios (hacerlo público):</p>

<p>{% img center /images/bots/fb_bot_publish.png %}</p>

<p>Enlaces:</p>

<ul>
<li><a href="https://developers.facebook.com/docs/messenger-platform/guides/quick-start">Quick Start</a>: cómo crear y configurar webhooks.</li>
</ul>

]]></content>
  </entry>
  
</feed>
